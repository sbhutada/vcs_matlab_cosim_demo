// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_st\fft_st.v
// Created: 2014-11-25 15:16:15
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// master_data_re                ce_out        1
// master_data_im                ce_out        1
// master_tvalid                 ce_out        1
// slave_tready                  ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: fft_st
// Source Path: fft_st/fft_st
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module fft_st
          (
           clk,
           reset,
           clk_enable,
           slave_data_re,
           slave_data_im,
           slave_tvalid,
           master_tready,
           ce_out,
           master_data_re,
           master_data_im,
           master_tvalid,
           slave_tready
          );


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] slave_data_re;  // int16
  input   signed [15:0] slave_data_im;  // int16
  input   slave_tvalid;
  input   master_tready;
  output  ce_out;
  output  signed [15:0] master_data_re;  // int16
  output  signed [15:0] master_data_im;  // int16
  output  master_tvalid;
  output  slave_tready;


  wire enb;
  wire signed [15:0] FFT_HDL_Optimized_out1_re;  // int16
  wire signed [15:0] FFT_HDL_Optimized_out1_im;  // int16
  wire FFT_HDL_Optimized_out2;
  wire HDL_FIFO_out2;
  wire Bitwise_Operator_out1;
  wire Bitwise_Operator1_out1;
  wire signed [15:0] HDL_FIFO_out1_re;  // int16
  wire signed [15:0] HDL_FIFO_out1_im;  // int16
  wire [7:0] HDL_FIFO_out3;  // uint8
  reg  Delay_out1;
  wire Compare_To_Constant_out1;


  FFT_HDL_Optimized   u_FFT_HDL_Optimized   (.clk(clk),
                                             .reset(reset),
                                             .enb(clk_enable),
                                             .dataIn_re(slave_data_re),  // int16
                                             .dataIn_im(slave_data_im),  // int16
                                             .validIn(slave_tvalid),
                                             .dataOut_re(FFT_HDL_Optimized_out1_re),  // int16
                                             .dataOut_im(FFT_HDL_Optimized_out1_im),  // int16
                                             .validOut(FFT_HDL_Optimized_out2)
                                             );

  assign Bitwise_Operator_out1 =  ~ HDL_FIFO_out2;



  assign Bitwise_Operator1_out1 = master_tready & Bitwise_Operator_out1;



  HDL_FIFO   u_HDL_FIFO   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .In_re(FFT_HDL_Optimized_out1_re),  // int16
                           .In_im(FFT_HDL_Optimized_out1_im),  // int16
                           .Push(FFT_HDL_Optimized_out2),
                           .Pop(Bitwise_Operator1_out1),
                           .Out_re(HDL_FIFO_out1_re),  // int16
                           .Out_im(HDL_FIFO_out1_im),  // int16
                           .Empty(HDL_FIFO_out2),
                           .Num(HDL_FIFO_out3)  // uint8
                           );

  assign master_data_re = HDL_FIFO_out1_re;

  assign master_data_im = HDL_FIFO_out1_im;

  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Bitwise_Operator1_out1;
        end
      end
    end



  assign master_tvalid = Delay_out1;

  assign Compare_To_Constant_out1 = HDL_FIFO_out3 <= 8'b01000000;



  assign slave_tready = Compare_To_Constant_out1;

  assign ce_out = clk_enable;

endmodule  // fft_st

