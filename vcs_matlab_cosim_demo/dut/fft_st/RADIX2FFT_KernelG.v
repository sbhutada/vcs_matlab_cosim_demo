// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_st\RADIX2FFT_KernelG.v
// Created: 2014-11-25 15:16:15
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX2FFT_KernelG
// Source Path: fft_st/fft_st/FFT HDL Optimized/RADIX2FFT_KernelG
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX2FFT_KernelG
          (
           clk,
           reset,
           enb,
           stageIn_4,
           twiddle_re_4,
           twiddle_im_4,
           dout_re3,
           dout_im3,
           dout_vld3,
           softReset,
           stageOut_4,
           twiddleAddr_4,
           dout_re4,
           dout_im4,
           dout_vld4
          );


  input   clk;
  input   reset;
  input   enb;
  input   [2:0] stageIn_4;  // ufix3
  input   signed [15:0] twiddle_re_4;  // sfix16_En14
  input   signed [15:0] twiddle_im_4;  // sfix16_En14
  input   signed [15:0] dout_re3;  // sfix16
  input   signed [15:0] dout_im3;  // sfix16
  input   dout_vld3;
  input   softReset;
  output  [2:0] stageOut_4;  // ufix3
  output  twiddleAddr_4;  // ufix1
  output  signed [15:0] dout_re4;  // sfix16
  output  signed [15:0] dout_im4;  // sfix16
  output  dout_vld4;


  reg [1:0] wrStateMachineG_wrState;  // ufix2
  reg [1:0] wrStateMachineG_curWrAddr;  // ufix2
  reg  wrStateMachineG_wrRdy;
  reg [1:0] wrStateMachineG_wrState_next;  // ufix2
  reg [1:0] wrStateMachineG_curWrAddr_next;  // ufix2
  reg  wrStateMachineG_wrRdy_next;
  reg  WrEnb;
  reg [1:0] wrAddr;  // ufix2
  reg [2:0] rdStateMachineG_rdState;  // ufix3
  reg [2:0] rdStateMachineG_twdlRdState;  // ufix3
  reg [2:0] rdStateMachineG_procState;  // ufix3
  reg [1:0] rdStateMachineG_curRdAddr;  // ufix2
  reg  rdStateMachineG_curRealDataVld;
  reg  rdStateMachineG_curRdEnb;
  reg  rdStateMachineG_curUseDlyData;
  reg [5:0] rdStateMachineG_sampleCnt;  // ufix6
  reg  rdStateMachineG_MemDoVld;
  reg  rdStateMachineG_EOF;
  reg  rdStateMachineG_EOF_ACK;
  reg  rdStateMachineG_holdData;
  reg  rdStateMachineG_twdlDlyReg;
  reg [4:0] rdStateMachineG_twdlCnt;  // ufix5
  reg [2:0] rdStateMachineG_rdState_next;  // ufix3
  reg [2:0] rdStateMachineG_twdlRdState_next;  // ufix3
  reg [2:0] rdStateMachineG_procState_next;  // ufix3
  reg [1:0] rdStateMachineG_curRdAddr_next;  // ufix2
  reg  rdStateMachineG_curRealDataVld_next;
  reg  rdStateMachineG_curRdEnb_next;
  reg  rdStateMachineG_curUseDlyData_next;
  reg [5:0] rdStateMachineG_sampleCnt_next;  // ufix6
  reg  rdStateMachineG_MemDoVld_next;
  reg  rdStateMachineG_EOF_next;
  reg  rdStateMachineG_EOF_ACK_next;
  reg  rdStateMachineG_holdData_next;
  reg  rdStateMachineG_twdlDlyReg_next;
  reg [4:0] rdStateMachineG_twdlCnt_next;  // ufix5
  reg [1:0] rdAddr;  // ufix2
  reg  MemDoVld;
  reg  dataVld_re;
  reg  dataRdEnb;
  reg  twdlRdEnb;
  reg  useDlyData;
  reg  twdlDly;
  reg  procEnb;
  reg  holdData;
  reg [4:0] twiddleAddrG_twiddleAddrReg_1;  // ufix5
  reg [4:0] twiddleAddrG_twiddleAddrReg_2;  // ufix5
  reg [2:0] twiddleAddrG_twdlDataMapReg;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg1;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg2;  // ufix3
  reg  twiddleAddrG_useInterData;
  reg  twiddleAddrG_useInterDataReg1;
  reg  twiddleAddrG_useInterDataReg2;
  reg  twiddleAddrG_twdlAddrPhase_1;
  reg  twiddleAddrG_phaseCnt;  // ufix1
  reg signed [15:0] twiddleAddrG_twdl_reI_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reI_reg1;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg1;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reI_reg2;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg2;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_regP;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_regP;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_regN;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_regN;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_re_dly;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_im_dly;  // sfix16
  reg  twiddleAddrG_procEnbReg;
  reg [4:0] twiddleAddrG_twiddleAddrReg_1_next;  // ufix5
  reg [4:0] twiddleAddrG_twiddleAddrReg_2_next;  // ufix5
  reg [2:0] twiddleAddrG_twdlDataMapReg_next;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg1_next;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg2_next;  // ufix3
  reg  twiddleAddrG_useInterData_next;
  reg  twiddleAddrG_useInterDataReg1_next;
  reg  twiddleAddrG_useInterDataReg2_next;
  reg  twiddleAddrG_twdlAddrPhase_1_next;
  reg  twiddleAddrG_phaseCnt_next;  // ufix1
  reg signed [15:0] twiddleAddrG_twdl_reI_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reI_reg1_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg1_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reI_reg2_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg2_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_regP_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_regP_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_regN_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_regN_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_re_dly_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_im_dly_next;  // sfix16_En14
  reg  twiddleAddrG_procEnbReg_next;
  reg  twiddleAddr_4_1;  // ufix1
  reg signed [15:0] twdl_re;  // sfix16_En14
  reg signed [15:0] twdl_im;  // sfix16_En14
  wire signed [15:0] x_re;  // sfix16
  wire signed [15:0] x_im;  // sfix16
  reg signed [15:0] delayBlockG_yre_dly1;  // sfix16
  reg signed [15:0] delayBlockG_yim_dly1;  // sfix16
  reg signed [15:0] delayBlockG_yre_dly2;  // sfix16
  reg signed [15:0] delayBlockG_yim_dly2;  // sfix16
  reg signed [15:0] delayBlockG_dinim_dly1;  // sfix16
  reg signed [15:0] delayBlockG_dinre_dly1;  // sfix16
  reg signed [15:0] delayBlockG_dinim_dly2;  // sfix16
  reg signed [15:0] delayBlockG_dinre_dly2;  // sfix16
  reg  delayBlockG_delayState;  // ufix1
  reg signed [15:0] delayBlockG_savedData_Xre;  // sfix16
  reg signed [15:0] delayBlockG_savedData_Xim;  // sfix16
  reg signed [15:0] delayBlockG_savedData_Yim;  // sfix16
  reg  delayBlockG_useSavedData;
  reg  delayBlockG_useSavedData_dly;
  reg signed [15:0] delayBlockG_xim_1_dly1;  // sfix16
  reg signed [15:0] delayBlockG_xre_1_dly1;  // sfix16
  reg signed [15:0] delayBlockG_yre_dly1_next;  // sfix16
  reg signed [15:0] delayBlockG_yim_dly1_next;  // sfix16
  reg signed [15:0] delayBlockG_yre_dly2_next;  // sfix16
  reg signed [15:0] delayBlockG_yim_dly2_next;  // sfix16
  reg signed [15:0] delayBlockG_dinim_dly1_next;  // sfix16
  reg signed [15:0] delayBlockG_dinre_dly1_next;  // sfix16
  reg signed [15:0] delayBlockG_dinim_dly2_next;  // sfix16
  reg signed [15:0] delayBlockG_dinre_dly2_next;  // sfix16
  reg  delayBlockG_delayState_next;  // ufix1
  reg signed [15:0] delayBlockG_savedData_Xre_next;  // sfix16
  reg signed [15:0] delayBlockG_savedData_Xim_next;  // sfix16
  reg signed [15:0] delayBlockG_savedData_Yim_next;  // sfix16
  reg  delayBlockG_useSavedData_next;
  reg  delayBlockG_useSavedData_dly_next;
  reg signed [15:0] delayBlockG_xim_1_dly1_next;  // sfix16
  reg signed [15:0] delayBlockG_xre_1_dly1_next;  // sfix16
  reg signed [15:0] x_reS;  // sfix16
  reg signed [15:0] x_imS;  // sfix16
  reg signed [15:0] x_re_dly1;  // sfix16
  reg signed [15:0] x_im_dly1;  // sfix16
  reg signed [15:0] x_re_dly2;  // sfix16
  reg signed [15:0] x_im_dly2;  // sfix16
  reg signed [15:0] din_re_dly1;  // sfix16
  reg signed [15:0] din_im_dly1;  // sfix16
  reg signed [15:0] din_re_dly2;  // sfix16
  reg signed [15:0] din_im_dly2;  // sfix16
  reg  commutatorG_procEnb_dly;
  reg  commutatorG_procEnb_dly_next;
  reg signed [15:0] x_u_in;  // sfix16
  reg signed [15:0] y_v_in;  // sfix16
  reg signed [15:0] v_y_in;  // sfix16
  reg  extended_dvld;
  wire signed [33:0] x_out;  // sfix34_En14
  wire signed [33:0] u_out;  // sfix34_En14
  wire signed [33:0] y_out;  // sfix34_En14
  wire signed [33:0] v_out;  // sfix34_En14
  wire realOut_dvld;
  wire doutVld;
  reg signed [15:0] outputMuxG_x_out_dly;  // sfix16
  reg signed [15:0] outputMuxG_y_out_dly;  // sfix16
  reg  outputMuxG_doutvld;
  reg  outputMuxG_realOut_vld_dly;
  reg signed [15:0] outputMuxG_x_out_dly_next;  // sfix16
  reg signed [15:0] outputMuxG_y_out_dly_next;  // sfix16
  reg  outputMuxG_doutvld_next;
  reg  outputMuxG_realOut_vld_dly_next;
  reg signed [15:0] dout_re4_1;  // sfix16
  reg signed [15:0] dout_im4_1;  // sfix16
  reg  dout_vld4_1;
  reg  rdStateMachineG_out7_0;
  reg [4:0] twiddleAddrG_twdlAddr_raw;  // ufix5
  reg [1:0] twiddleAddrG_twdlAddrMap;  // ufix2
  reg signed [15:0] twiddleAddrG_twdl_reX_reg2;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_reg2;  // sfix16_En14
  reg [2:0] twiddleAddrG_c;  // ufix3
  reg [1:0] twiddleAddrG_c_0;  // ufix2
  reg [1:0] twiddleAddrG_add_temp;  // ufix2
  reg [4:0] twiddleAddrG_sub_temp;  // ufix5
  reg [3:0] twiddleAddrG_sub_temp_0;  // ufix4
  reg  twiddleAddrG_cast;  // ufix1
  reg signed [16:0] twiddleAddrG_cast_0;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_1;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_2;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_3;  // sfix17_En14
  reg [2:0] twiddleAddrG_t_0_0;  // ufix3
  reg [1:0] twiddleAddrG_t_1;  // ufix2
  reg [4:0] twiddleAddrG_t_2_0;  // ufix5
  reg [2:0] twiddleAddrG_t_3;  // ufix3
  reg [3:0] twiddleAddrG_t_4_0;  // ufix4
  reg signed [33:0] outputMuxG_in5_0;  // sfix34_En14
  reg signed [33:0] outputMuxG_in4_0;  // sfix34_En14
  reg signed [33:0] outputMuxG_in2_0;  // sfix34_En14
  reg signed [33:0] outputMuxG_in3_0;  // sfix34_En14


  // wrStateMachineG
  always @(posedge clk)
    begin : wrStateMachineG_process
      if (reset == 1'b1) begin
        wrStateMachineG_wrState <= 2'b00;
        wrStateMachineG_wrRdy <= 1'b1;
        wrStateMachineG_curWrAddr <= 2'b00;
      end
      else begin
        if (enb) begin
          wrStateMachineG_wrState <= wrStateMachineG_wrState_next;
          wrStateMachineG_curWrAddr <= wrStateMachineG_curWrAddr_next;
          wrStateMachineG_wrRdy <= wrStateMachineG_wrRdy_next;
        end
      end
    end

  always @(wrStateMachineG_wrState, wrStateMachineG_curWrAddr, wrStateMachineG_wrRdy,
       dout_vld3) begin
    wrStateMachineG_wrState_next = wrStateMachineG_wrState;
    wrStateMachineG_curWrAddr_next = wrStateMachineG_curWrAddr;
    wrStateMachineG_wrRdy_next = wrStateMachineG_wrRdy;
    case ( wrStateMachineG_wrState)
      2'b00 :
        begin
          wrStateMachineG_wrRdy_next = 1'b1;
          if (dout_vld3) begin
            wrStateMachineG_wrState_next = 2'b01;
            wrStateMachineG_curWrAddr_next = 2'b01;
          end
          else begin
            wrStateMachineG_wrState_next = 2'b00;
            wrStateMachineG_curWrAddr_next = 2'b00;
          end
        end
      2'b01 :
        begin
          if (dout_vld3) begin
            if (wrStateMachineG_curWrAddr == 2'b11) begin
              wrStateMachineG_curWrAddr_next = 2'b00;
              wrStateMachineG_wrRdy_next =  ! wrStateMachineG_wrRdy;
              wrStateMachineG_wrState_next = 2'b10;
            end
            else begin
              wrStateMachineG_curWrAddr_next = wrStateMachineG_curWrAddr + 2'b01;
              wrStateMachineG_wrRdy_next = 1'b1;
            end
          end
        end
      2'b10 :
        begin
          if (dout_vld3) begin
            wrStateMachineG_wrState_next = 2'b11;
            wrStateMachineG_curWrAddr_next = 2'b00;
            wrStateMachineG_wrRdy_next = 1'b1;
          end
        end
      2'b11 :
        begin
          if (dout_vld3) begin
            if (wrStateMachineG_curWrAddr == 2'b10) begin
              wrStateMachineG_curWrAddr_next = 2'b00;
              wrStateMachineG_wrRdy_next = 1'b1;
              wrStateMachineG_wrState_next = 2'b01;
            end
            else begin
              wrStateMachineG_curWrAddr_next = wrStateMachineG_curWrAddr + 2'b01;
              wrStateMachineG_wrRdy_next =  ! wrStateMachineG_wrRdy;
              wrStateMachineG_wrState_next = 2'b11;
            end
          end
        end
      default :
        begin
          wrStateMachineG_wrState_next = 2'b00;
          wrStateMachineG_curWrAddr_next = 2'b00;
          wrStateMachineG_wrRdy_next = 1'b1;
        end
    endcase
    WrEnb = wrStateMachineG_wrRdy && dout_vld3;
    wrAddr = wrStateMachineG_curWrAddr;
  end



  // rdStateMachineG
  always @(posedge clk)
    begin : rdStateMachineG_process
      if (reset == 1'b1) begin
        rdStateMachineG_rdState <= 3'b000;
        rdStateMachineG_twdlRdState <= 3'b000;
        rdStateMachineG_procState <= 3'b000;
        rdStateMachineG_curRdAddr <= 2'b00;
        rdStateMachineG_curRealDataVld <= 1'b0;
        rdStateMachineG_curRdEnb <= 1'b0;
        rdStateMachineG_curUseDlyData <= 1'b0;
        rdStateMachineG_sampleCnt <= 6'b000000;
        rdStateMachineG_EOF <= 1'b0;
        rdStateMachineG_EOF_ACK <= 1'b0;
        rdStateMachineG_MemDoVld <= 1'b0;
        rdStateMachineG_holdData <= 1'b0;
        rdStateMachineG_twdlDlyReg <= 1'b0;
        rdStateMachineG_twdlCnt <= 5'b00000;
      end
      else begin
        if (enb) begin
          rdStateMachineG_rdState <= rdStateMachineG_rdState_next;
          rdStateMachineG_twdlRdState <= rdStateMachineG_twdlRdState_next;
          rdStateMachineG_procState <= rdStateMachineG_procState_next;
          rdStateMachineG_curRdAddr <= rdStateMachineG_curRdAddr_next;
          rdStateMachineG_curRealDataVld <= rdStateMachineG_curRealDataVld_next;
          rdStateMachineG_curRdEnb <= rdStateMachineG_curRdEnb_next;
          rdStateMachineG_curUseDlyData <= rdStateMachineG_curUseDlyData_next;
          rdStateMachineG_sampleCnt <= rdStateMachineG_sampleCnt_next;
          rdStateMachineG_MemDoVld <= rdStateMachineG_MemDoVld_next;
          rdStateMachineG_EOF <= rdStateMachineG_EOF_next;
          rdStateMachineG_EOF_ACK <= rdStateMachineG_EOF_ACK_next;
          rdStateMachineG_holdData <= rdStateMachineG_holdData_next;
          rdStateMachineG_twdlDlyReg <= rdStateMachineG_twdlDlyReg_next;
          rdStateMachineG_twdlCnt <= rdStateMachineG_twdlCnt_next;
        end
      end
    end

  always @(rdStateMachineG_rdState, rdStateMachineG_twdlRdState,
       rdStateMachineG_procState, rdStateMachineG_curRdAddr,
       rdStateMachineG_curRealDataVld, rdStateMachineG_curRdEnb,
       rdStateMachineG_curUseDlyData, rdStateMachineG_sampleCnt,
       rdStateMachineG_MemDoVld, rdStateMachineG_EOF, rdStateMachineG_EOF_ACK,
       rdStateMachineG_holdData, rdStateMachineG_twdlDlyReg,
       rdStateMachineG_twdlCnt, dout_vld3, wrAddr) begin
    rdStateMachineG_rdState_next = rdStateMachineG_rdState;
    rdStateMachineG_twdlRdState_next = rdStateMachineG_twdlRdState;
    rdStateMachineG_procState_next = rdStateMachineG_procState;
    rdStateMachineG_curRdAddr_next = rdStateMachineG_curRdAddr;
    rdStateMachineG_curRealDataVld_next = rdStateMachineG_curRealDataVld;
    rdStateMachineG_curUseDlyData_next = rdStateMachineG_curUseDlyData;
    rdStateMachineG_sampleCnt_next = rdStateMachineG_sampleCnt;
    rdStateMachineG_EOF_ACK_next = rdStateMachineG_EOF_ACK;
    rdStateMachineG_holdData_next = rdStateMachineG_holdData;
    rdStateMachineG_twdlDlyReg_next = rdStateMachineG_twdlDlyReg;
    rdStateMachineG_twdlCnt_next = rdStateMachineG_twdlCnt;
    case ( rdStateMachineG_procState)
      3'b000 :
        begin
          rdStateMachineG_procState_next = 3'b000;
          rdStateMachineG_out7_0 = 1'b0;
          if (rdStateMachineG_curRdEnb && dout_vld3) begin
            rdStateMachineG_procState_next = 3'b001;
          end
          else if (rdStateMachineG_curRdEnb && ( ! dout_vld3)) begin
            rdStateMachineG_procState_next = 3'b010;
          end
        end
      3'b001 :
        begin
          rdStateMachineG_out7_0 = 1'b0;
          if (dout_vld3 || rdStateMachineG_EOF) begin
            rdStateMachineG_out7_0 = 1'b1;
          end
          if (rdStateMachineG_EOF) begin
            rdStateMachineG_procState_next = 3'b011;
          end
          else if (dout_vld3) begin
            rdStateMachineG_procState_next = 3'b000;
          end
        end
      3'b010 :
        begin
          rdStateMachineG_out7_0 = 1'b0;
          if (dout_vld3) begin
            rdStateMachineG_procState_next = 3'b001;
          end
          else if (rdStateMachineG_EOF_ACK) begin
            rdStateMachineG_out7_0 = 1'b1;
            rdStateMachineG_procState_next = 3'b000;
          end
        end
      3'b011 :
        begin
          rdStateMachineG_out7_0 = rdStateMachineG_curRealDataVld;
          if ( ! rdStateMachineG_curRdEnb) begin
            rdStateMachineG_procState_next = 3'b000;
          end
        end
      default :
        begin
          rdStateMachineG_out7_0 = 1'b0;
          rdStateMachineG_procState_next = 3'b000;
        end
    endcase
    case ( rdStateMachineG_twdlRdState)
      3'b000 :
        begin
          rdStateMachineG_twdlDlyReg_next = 1'b0;
          twdlRdEnb = 1'b0;
          rdStateMachineG_twdlCnt_next = 5'b00000;
          if (dout_vld3 && (wrAddr == 2'b01)) begin
            rdStateMachineG_twdlRdState_next = 3'b001;
          end
          else begin
            rdStateMachineG_twdlRdState_next = 3'b000;
          end
        end
      3'b001 :
        begin
          twdlRdEnb = 1'b1;
          rdStateMachineG_twdlDlyReg_next = 1'b0;
          rdStateMachineG_twdlRdState_next = 3'b010;
          rdStateMachineG_twdlCnt_next = rdStateMachineG_twdlCnt + 5'b00001;
        end
      3'b010 :
        begin
          if (rdStateMachineG_twdlCnt == 5'b11111) begin
            rdStateMachineG_twdlRdState_next = 3'b100;
          end
          else if (dout_vld3) begin
            rdStateMachineG_twdlRdState_next = 3'b011;
          end
          else begin
            rdStateMachineG_twdlRdState_next = 3'b010;
            rdStateMachineG_twdlDlyReg_next = 1'b1;
          end
          twdlRdEnb = 1'b0;
          if (rdStateMachineG_out7_0) begin
            twdlRdEnb = 1'b1;
            rdStateMachineG_twdlCnt_next = rdStateMachineG_twdlCnt + 5'b00001;
          end
        end
      3'b011 :
        begin
          rdStateMachineG_twdlDlyReg_next = 1'b0;
          rdStateMachineG_twdlRdState_next = 3'b010;
          if (rdStateMachineG_twdlCnt == 5'b11111) begin
            rdStateMachineG_twdlRdState_next = 3'b100;
          end
          twdlRdEnb = 1'b0;
          if (rdStateMachineG_out7_0) begin
            twdlRdEnb = 1'b1;
            rdStateMachineG_twdlCnt_next = rdStateMachineG_twdlCnt + 5'b00001;
          end
        end
      3'b100 :
        begin
          twdlRdEnb = 1'b0;
          if (rdStateMachineG_out7_0) begin
            twdlRdEnb = 1'b1;
            rdStateMachineG_twdlRdState_next = 3'b000;
          end
        end
      default :
        begin
          twdlRdEnb = 1'b0;
          rdStateMachineG_twdlDlyReg_next = 1'b0;
          rdStateMachineG_twdlRdState_next = 3'b000;
          rdStateMachineG_twdlCnt_next = 5'b00000;
        end
    endcase
    case ( rdStateMachineG_rdState)
      3'b000 :
        begin
          rdStateMachineG_holdData_next = 1'b0;
          rdStateMachineG_EOF_ACK_next = 1'b0;
          rdStateMachineG_curRdAddr_next = 2'b00;
          rdStateMachineG_curRdEnb_next = 1'b0;
          rdStateMachineG_curRealDataVld_next = 1'b0;
          rdStateMachineG_curUseDlyData_next = 1'b1;
          if (dout_vld3 && (wrAddr == 2'b01)) begin
            rdStateMachineG_rdState_next = 3'b001;
          end
        end
      3'b001 :
        begin
          rdStateMachineG_curRdEnb_next = 1'b0;
          rdStateMachineG_EOF_ACK_next = 1'b0;
          rdStateMachineG_curRealDataVld_next = rdStateMachineG_curRdEnb;
          if (dout_vld3) begin
            rdStateMachineG_curRdAddr_next = 2'b00;
            rdStateMachineG_rdState_next = 3'b010;
            rdStateMachineG_curRealDataVld_next = 1'b0;
            rdStateMachineG_curRdEnb_next = 1'b1;
          end
          else if (rdStateMachineG_EOF) begin
            rdStateMachineG_curRdAddr_next = 2'b00;
            rdStateMachineG_rdState_next = 3'b000;
            rdStateMachineG_curUseDlyData_next = 1'b1;
            rdStateMachineG_curRealDataVld_next = 1'b0;
          end
        end
      3'b010 :
        begin
          if (dout_vld3) begin
            rdStateMachineG_curRealDataVld_next = rdStateMachineG_curRdEnb;
            rdStateMachineG_curUseDlyData_next = 1'b0;
            if (rdStateMachineG_curRdAddr == 2'b10) begin
              rdStateMachineG_curRdAddr_next = 2'b00;
              rdStateMachineG_rdState_next = 3'b011;
              rdStateMachineG_curRdEnb_next = 1'b1;
            end
            else begin
              rdStateMachineG_curRdAddr_next = rdStateMachineG_curRdAddr + 2'b01;
              rdStateMachineG_curRdEnb_next =  ! rdStateMachineG_curRdEnb;
            end
          end
          else begin
            rdStateMachineG_curRdEnb_next = rdStateMachineG_curRdEnb;
          end
        end
      3'b011 :
        begin
          rdStateMachineG_curRealDataVld_next = 1'b0;
          rdStateMachineG_curRdEnb_next = dout_vld3;
          if ((rdStateMachineG_MemDoVld && ( ! rdStateMachineG_curRdEnb)) && (rdStateMachineG_curRdAddr == 2'b00)) begin
            rdStateMachineG_holdData_next = 1'b1;
          end
          else if ((rdStateMachineG_curRdAddr == 2'b01) && dout_vld3) begin
            rdStateMachineG_holdData_next = 1'b0;
          end
          if (dout_vld3) begin
            if (rdStateMachineG_curRdAddr == 2'b01) begin
              rdStateMachineG_rdState_next = 3'b100;
              rdStateMachineG_curRdAddr_next = rdStateMachineG_curRdAddr + 2'b01;
              rdStateMachineG_curRealDataVld_next = 1'b1;
              rdStateMachineG_curUseDlyData_next = 1'b1;
            end
            else begin
              rdStateMachineG_curRdAddr_next = rdStateMachineG_curRdAddr + 2'b01;
            end
          end
        end
      3'b100 :
        begin
          rdStateMachineG_curRealDataVld_next =  ! rdStateMachineG_curRealDataVld;
          rdStateMachineG_curRdEnb_next = 1'b0;
          rdStateMachineG_holdData_next = 1'b0;
          if (rdStateMachineG_curRdAddr == 2'b11) begin
            rdStateMachineG_curRdAddr_next = 2'b00;
            if ((rdStateMachineG_EOF_ACK || rdStateMachineG_EOF) && ( ! dout_vld3)) begin
              rdStateMachineG_rdState_next = 3'b000;
            end
            else if (dout_vld3) begin
              rdStateMachineG_rdState_next = 3'b001;
            end
          end
          else if ((dout_vld3 || rdStateMachineG_EOF) || rdStateMachineG_EOF_ACK) begin
            rdStateMachineG_curRdAddr_next = rdStateMachineG_curRdAddr + 2'b01;
            rdStateMachineG_curRdEnb_next = 1'b1;
          end
        end
      default :
        begin
          rdStateMachineG_rdState_next = 3'b000;
          rdStateMachineG_curRdAddr_next = 2'b00;
          rdStateMachineG_curRdEnb_next = 1'b0;
          rdStateMachineG_curRealDataVld_next = 1'b0;
          rdStateMachineG_curUseDlyData_next = 1'b1;
        end
    endcase
    rdStateMachineG_MemDoVld_next = rdStateMachineG_curRdEnb;
    if (rdStateMachineG_EOF) begin
      rdStateMachineG_EOF_ACK_next = 1'b1;
    end
    rdStateMachineG_EOF_next = 1'b0;
    if (dout_vld3 && (rdStateMachineG_sampleCnt == 6'b111111)) begin
      rdStateMachineG_EOF_next = 1'b1;
    end
    if (dout_vld3) begin
      rdStateMachineG_sampleCnt_next = rdStateMachineG_sampleCnt + 6'b000001;
    end
    rdAddr = rdStateMachineG_curRdAddr;
    MemDoVld = rdStateMachineG_MemDoVld;
    dataVld_re = rdStateMachineG_curRealDataVld;
    dataRdEnb = rdStateMachineG_curRdEnb;
    useDlyData = rdStateMachineG_curUseDlyData;
    twdlDly = rdStateMachineG_twdlDlyReg;
    procEnb = rdStateMachineG_out7_0;
    holdData = rdStateMachineG_holdData;
  end



  // twiddleAddrG
  always @(posedge clk)
    begin : twiddleAddrG_process
      if (reset == 1'b1) begin
        twiddleAddrG_twiddleAddrReg_1 <= 5'b00000;
        twiddleAddrG_twiddleAddrReg_2 <= 5'b00000;
        twiddleAddrG_twdlDataMapReg <= 3'b000;
        twiddleAddrG_twdlDataMapReg1 <= 3'b000;
        twiddleAddrG_twdlDataMapReg2 <= 3'b000;
        twiddleAddrG_phaseCnt <= 1'b0;
        twiddleAddrG_twdlAddrPhase_1 <= 1'b1;
        twiddleAddrG_useInterData <= 1'b0;
        twiddleAddrG_useInterDataReg1 <= 1'b0;
        twiddleAddrG_useInterDataReg2 <= 1'b0;
        twiddleAddrG_twdl_reI_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reI_reg1 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg1 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reI_reg2 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg2 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_regP <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_regP <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_regN <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_regN <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_re_dly <= 16'sb0000000000000000;
        twiddleAddrG_twdl_im_dly <= 16'sb0000000000000000;
        twiddleAddrG_procEnbReg <= 1'b0;
      end
      else begin
        if (enb) begin
          twiddleAddrG_twiddleAddrReg_1 <= twiddleAddrG_twiddleAddrReg_1_next;
          twiddleAddrG_twiddleAddrReg_2 <= twiddleAddrG_twiddleAddrReg_2_next;
          twiddleAddrG_twdlDataMapReg <= twiddleAddrG_twdlDataMapReg_next;
          twiddleAddrG_twdlDataMapReg1 <= twiddleAddrG_twdlDataMapReg1_next;
          twiddleAddrG_twdlDataMapReg2 <= twiddleAddrG_twdlDataMapReg2_next;
          twiddleAddrG_useInterData <= twiddleAddrG_useInterData_next;
          twiddleAddrG_useInterDataReg1 <= twiddleAddrG_useInterDataReg1_next;
          twiddleAddrG_useInterDataReg2 <= twiddleAddrG_useInterDataReg2_next;
          twiddleAddrG_twdlAddrPhase_1 <= twiddleAddrG_twdlAddrPhase_1_next;
          twiddleAddrG_phaseCnt <= twiddleAddrG_phaseCnt_next;
          twiddleAddrG_twdl_reI_reg <= twiddleAddrG_twdl_reI_reg_next;
          twiddleAddrG_twdl_imI_reg <= twiddleAddrG_twdl_imI_reg_next;
          twiddleAddrG_twdl_reI_reg1 <= twiddleAddrG_twdl_reI_reg1_next;
          twiddleAddrG_twdl_imI_reg1 <= twiddleAddrG_twdl_imI_reg1_next;
          twiddleAddrG_twdl_reI_reg2 <= twiddleAddrG_twdl_reI_reg2_next;
          twiddleAddrG_twdl_imI_reg2 <= twiddleAddrG_twdl_imI_reg2_next;
          twiddleAddrG_twdl_reX_regP <= twiddleAddrG_twdl_reX_regP_next;
          twiddleAddrG_twdl_imX_regP <= twiddleAddrG_twdl_imX_regP_next;
          twiddleAddrG_twdl_reX_regN <= twiddleAddrG_twdl_reX_regN_next;
          twiddleAddrG_twdl_imX_regN <= twiddleAddrG_twdl_imX_regN_next;
          twiddleAddrG_twdl_reX_reg <= twiddleAddrG_twdl_reX_reg_next;
          twiddleAddrG_twdl_imX_reg <= twiddleAddrG_twdl_imX_reg_next;
          twiddleAddrG_twdl_re_dly <= twiddleAddrG_twdl_re_dly_next;
          twiddleAddrG_twdl_im_dly <= twiddleAddrG_twdl_im_dly_next;
          twiddleAddrG_procEnbReg <= twiddleAddrG_procEnbReg_next;
        end
      end
    end

  always @(twiddleAddrG_twiddleAddrReg_1, twiddleAddrG_twiddleAddrReg_2,
       twiddleAddrG_twdlDataMapReg, twiddleAddrG_twdlDataMapReg1,
       twiddleAddrG_twdlDataMapReg2, twiddleAddrG_useInterData,
       twiddleAddrG_useInterDataReg1, twiddleAddrG_useInterDataReg2,
       twiddleAddrG_twdlAddrPhase_1, twiddleAddrG_phaseCnt,
       twiddleAddrG_twdl_reI_reg, twiddleAddrG_twdl_imI_reg,
       twiddleAddrG_twdl_reI_reg1, twiddleAddrG_twdl_imI_reg1,
       twiddleAddrG_twdl_reI_reg2, twiddleAddrG_twdl_imI_reg2,
       twiddleAddrG_twdl_reX_regP, twiddleAddrG_twdl_imX_regP,
       twiddleAddrG_twdl_reX_regN, twiddleAddrG_twdl_imX_regN,
       twiddleAddrG_twdl_reX_reg, twiddleAddrG_twdl_imX_reg,
       twiddleAddrG_twdl_re_dly, twiddleAddrG_twdl_im_dly,
       twiddleAddrG_procEnbReg, twdlRdEnb, twiddle_re_4, twiddle_im_4, twdlDly,
       procEnb) begin
    twiddleAddrG_twiddleAddrReg_1_next = twiddleAddrG_twiddleAddrReg_1;
    twiddleAddrG_twiddleAddrReg_2_next = twiddleAddrG_twiddleAddrReg_2;
    twiddleAddrG_twdlDataMapReg_next = twiddleAddrG_twdlDataMapReg;
    twiddleAddrG_useInterData_next = twiddleAddrG_useInterData;
    twiddleAddrG_twdlAddrPhase_1_next = twiddleAddrG_twdlAddrPhase_1;
    twiddleAddrG_phaseCnt_next = twiddleAddrG_phaseCnt;
    twiddleAddrG_twdl_reI_reg_next = twiddleAddrG_twdl_reI_reg;
    twiddleAddrG_twdl_imI_reg_next = twiddleAddrG_twdl_imI_reg;
    twiddleAddrG_twdl_re_dly_next = twiddleAddrG_twdl_re_dly;
    twiddleAddrG_twdl_im_dly_next = twiddleAddrG_twdl_im_dly;
    if (twdlRdEnb && twiddleAddrG_twdlAddrPhase_1) begin
      twiddleAddrG_twiddleAddrReg_1_next = twiddleAddrG_twiddleAddrReg_1 + 5'b00001;
    end
    if (twdlRdEnb && ( ! twiddleAddrG_twdlAddrPhase_1)) begin
      twiddleAddrG_twiddleAddrReg_2_next = twiddleAddrG_twiddleAddrReg_2 + 5'b00001;
    end
    if (twiddleAddrG_twdlAddrPhase_1) begin
      twiddleAddrG_twdlAddr_raw = {twiddleAddrG_twiddleAddrReg_1[0], twiddleAddrG_twiddleAddrReg_1[1], twiddleAddrG_twiddleAddrReg_1[2], twiddleAddrG_twiddleAddrReg_1[3], twiddleAddrG_twiddleAddrReg_1[4]};
    end
    else begin
      twiddleAddrG_twdlAddr_raw = {twiddleAddrG_twiddleAddrReg_2[0], twiddleAddrG_twiddleAddrReg_2[1], twiddleAddrG_twiddleAddrReg_2[2], twiddleAddrG_twiddleAddrReg_2[3], twiddleAddrG_twiddleAddrReg_2[4]};
    end
    if (twiddleAddrG_phaseCnt && twdlRdEnb) begin
      twiddleAddrG_twdlAddrPhase_1_next =  ! twiddleAddrG_twdlAddrPhase_1;
    end
    if (twdlRdEnb) begin
      twiddleAddrG_t_1 = {1'b0, twiddleAddrG_phaseCnt};
      twiddleAddrG_add_temp = twiddleAddrG_t_1 + 2'b01;
      twiddleAddrG_phaseCnt_next = twiddleAddrG_add_temp[0];
    end
    twiddleAddrG_c = twiddleAddrG_twdlAddr_raw[3:1];
    twiddleAddrG_c_0 = twiddleAddrG_c[2:1];
    case ( twiddleAddrG_c_0)
      2'b00 :
        begin
          twiddleAddrG_twdlAddrMap = twiddleAddrG_c[1:0];
        end
      2'b01 :
        begin
          twiddleAddrG_t_3 = twiddleAddrG_c;
          twiddleAddrG_t_4_0 = {1'b0, twiddleAddrG_t_3};
          twiddleAddrG_sub_temp_0 = 4'b0010 - twiddleAddrG_t_4_0;
          twiddleAddrG_cast = twiddleAddrG_sub_temp_0[0];
          twiddleAddrG_twdlAddrMap = {1'b0, twiddleAddrG_cast};
        end
      2'b10 :
        begin
          twiddleAddrG_t_0_0 = twiddleAddrG_c;
          twiddleAddrG_twdlAddrMap = twiddleAddrG_t_0_0[1:0];
        end
      default :
        begin
          twiddleAddrG_t_2_0 = {2'b0, twiddleAddrG_c};
          twiddleAddrG_sub_temp = 5'b01000 - twiddleAddrG_t_2_0;
          twiddleAddrG_twdlAddrMap = twiddleAddrG_sub_temp[1:0];
        end
    endcase
    case ( twiddleAddrG_twdlDataMapReg2)
      3'b000 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
      3'b010 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_imX_regN;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_reX_regN;
        end
      3'b011 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_imX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_reX_regN;
        end
      3'b001 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regN;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
      default :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
    endcase
    twiddleAddrG_twdlDataMapReg2_next = twiddleAddrG_twdlDataMapReg1;
    twiddleAddrG_twdlDataMapReg1_next = twiddleAddrG_twdlDataMapReg;
    case ( twiddleAddrG_c_0)
      2'b00 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b000;
        end
      2'b01 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b010;
        end
      2'b10 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b011;
        end
      default :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b001;
        end
    endcase
    if (twiddleAddrG_useInterDataReg2) begin
      twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reI_reg2;
      twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imI_reg2;
    end
    if (twdlDly) begin
      twdl_re = twiddleAddrG_twdl_re_dly;
      twdl_im = twiddleAddrG_twdl_im_dly;
    end
    else begin
      twdl_re = twiddleAddrG_twdl_reX_reg2;
      twdl_im = twiddleAddrG_twdl_imX_reg2;
    end
    if (( ! twdlDly) || twiddleAddrG_procEnbReg) begin
      twiddleAddrG_twdl_re_dly_next = twiddleAddrG_twdl_reX_reg2;
      twiddleAddrG_twdl_im_dly_next = twiddleAddrG_twdl_imX_reg2;
    end
    twiddleAddrG_useInterDataReg2_next = twiddleAddrG_useInterDataReg1;
    twiddleAddrG_useInterDataReg1_next = twiddleAddrG_useInterData;
    twiddleAddrG_twdl_reI_reg2_next = twiddleAddrG_twdl_reI_reg1;
    twiddleAddrG_twdl_reI_reg1_next = twiddleAddrG_twdl_reI_reg;
    twiddleAddrG_twdl_imI_reg2_next = twiddleAddrG_twdl_imI_reg1;
    twiddleAddrG_twdl_imI_reg1_next = twiddleAddrG_twdl_imI_reg;
    case ( twiddleAddrG_c)
      3'b010 :
        begin
          twiddleAddrG_useInterData_next = 1'b1;
          twiddleAddrG_twdl_reI_reg_next = 16'sb0010110101000001;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
      3'b110 :
        begin
          twiddleAddrG_useInterData_next = 1'b1;
          twiddleAddrG_twdl_reI_reg_next = 16'sb1101001010111111;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
      default :
        begin
          twiddleAddrG_useInterData_next = 1'b0;
          twiddleAddrG_twdl_reI_reg_next = 16'sb0010110101000001;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
    endcase
    twiddleAddrG_twdl_reX_regP_next = twiddleAddrG_twdl_reX_reg;
    twiddleAddrG_twdl_imX_regP_next = twiddleAddrG_twdl_imX_reg;
    twiddleAddrG_cast_0 = {twiddleAddrG_twdl_reX_reg[15], twiddleAddrG_twdl_reX_reg};
    twiddleAddrG_cast_1 =  - (twiddleAddrG_cast_0);
    twiddleAddrG_twdl_reX_regN_next = twiddleAddrG_cast_1[15:0];
    twiddleAddrG_cast_2 = {twiddleAddrG_twdl_imX_reg[15], twiddleAddrG_twdl_imX_reg};
    twiddleAddrG_cast_3 =  - (twiddleAddrG_cast_2);
    twiddleAddrG_twdl_imX_regN_next = twiddleAddrG_cast_3[15:0];
    twiddleAddrG_twdl_reX_reg_next = twiddle_re_4;
    twiddleAddrG_twdl_imX_reg_next = twiddle_im_4;
    twiddleAddrG_procEnbReg_next = procEnb;
    twiddleAddr_4_1 = twiddleAddrG_twdlAddrMap[0];
  end



  dataMEM_re_4x16b   u_dataMEM_re_4x16b   (.clk(clk),
                                           .enb(enb),
                                           .wr_din(dout_re3),  // sfix16
                                           .wr_addr(wrAddr),  // ufix2
                                           .wr_en(WrEnb),
                                           .rd_addr(rdAddr),  // ufix2
                                           .rd_dout(x_re)  // sfix16
                                           );

  dataMEM_re_4x16b   u_dataMEM_im   (.clk(clk),
                                     .enb(enb),
                                     .wr_din(dout_im3),  // sfix16
                                     .wr_addr(wrAddr),  // ufix2
                                     .wr_en(WrEnb),
                                     .rd_addr(rdAddr),  // ufix2
                                     .rd_dout(x_im)  // sfix16
                                     );

  // delayBlockG
  always @(posedge clk)
    begin : delayBlockG_process
      if (reset == 1'b1) begin
        delayBlockG_delayState <= 1'b0;
        delayBlockG_xre_1_dly1 <= 16'sb0000000000000000;
        delayBlockG_xim_1_dly1 <= 16'sb0000000000000000;
        delayBlockG_yre_dly1 <= 16'sb0000000000000000;
        delayBlockG_yim_dly1 <= 16'sb0000000000000000;
        delayBlockG_yre_dly2 <= 16'sb0000000000000000;
        delayBlockG_yim_dly2 <= 16'sb0000000000000000;
        delayBlockG_dinim_dly1 <= 16'sb0000000000000000;
        delayBlockG_dinre_dly1 <= 16'sb0000000000000000;
        delayBlockG_dinim_dly2 <= 16'sb0000000000000000;
        delayBlockG_dinre_dly2 <= 16'sb0000000000000000;
        delayBlockG_savedData_Xre <= 16'sb0000000000000000;
        delayBlockG_savedData_Xim <= 16'sb0000000000000000;
        delayBlockG_savedData_Yim <= 16'sb0000000000000000;
        delayBlockG_useSavedData <= 1'b0;
        delayBlockG_useSavedData_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          delayBlockG_yre_dly1 <= delayBlockG_yre_dly1_next;
          delayBlockG_yim_dly1 <= delayBlockG_yim_dly1_next;
          delayBlockG_yre_dly2 <= delayBlockG_yre_dly2_next;
          delayBlockG_yim_dly2 <= delayBlockG_yim_dly2_next;
          delayBlockG_dinim_dly1 <= delayBlockG_dinim_dly1_next;
          delayBlockG_dinre_dly1 <= delayBlockG_dinre_dly1_next;
          delayBlockG_dinim_dly2 <= delayBlockG_dinim_dly2_next;
          delayBlockG_dinre_dly2 <= delayBlockG_dinre_dly2_next;
          delayBlockG_delayState <= delayBlockG_delayState_next;
          delayBlockG_savedData_Xre <= delayBlockG_savedData_Xre_next;
          delayBlockG_savedData_Xim <= delayBlockG_savedData_Xim_next;
          delayBlockG_savedData_Yim <= delayBlockG_savedData_Yim_next;
          delayBlockG_useSavedData <= delayBlockG_useSavedData_next;
          delayBlockG_useSavedData_dly <= delayBlockG_useSavedData_dly_next;
          delayBlockG_xim_1_dly1 <= delayBlockG_xim_1_dly1_next;
          delayBlockG_xre_1_dly1 <= delayBlockG_xre_1_dly1_next;
        end
      end
    end

  always @(delayBlockG_yre_dly1, delayBlockG_yim_dly1, delayBlockG_yre_dly2,
       delayBlockG_yim_dly2, delayBlockG_dinim_dly1, delayBlockG_dinre_dly1,
       delayBlockG_dinim_dly2, delayBlockG_dinre_dly2, delayBlockG_delayState,
       delayBlockG_savedData_Xre, delayBlockG_savedData_Xim,
       delayBlockG_savedData_Yim, delayBlockG_useSavedData,
       delayBlockG_useSavedData_dly, delayBlockG_xim_1_dly1,
       delayBlockG_xre_1_dly1, holdData, MemDoVld, useDlyData, procEnb, x_re,
       x_im, dout_re3, dout_im3, dout_vld3) begin
    delayBlockG_yre_dly1_next = delayBlockG_yre_dly1;
    delayBlockG_yim_dly1_next = delayBlockG_yim_dly1;
    delayBlockG_dinim_dly1_next = delayBlockG_dinim_dly1;
    delayBlockG_dinre_dly1_next = delayBlockG_dinre_dly1;
    delayBlockG_delayState_next = delayBlockG_delayState;
    delayBlockG_savedData_Xre_next = delayBlockG_savedData_Xre;
    delayBlockG_savedData_Xim_next = delayBlockG_savedData_Xim;
    delayBlockG_savedData_Yim_next = delayBlockG_savedData_Yim;
    delayBlockG_useSavedData_next = delayBlockG_useSavedData;
    delayBlockG_xim_1_dly1_next = delayBlockG_xim_1_dly1;
    delayBlockG_xre_1_dly1_next = delayBlockG_xre_1_dly1;
    if (delayBlockG_useSavedData_dly) begin
      x_im_dly1 = delayBlockG_savedData_Yim;
    end
    else begin
      x_im_dly1 = delayBlockG_yim_dly1;
    end
    if (useDlyData) begin
      x_reS = x_re;
    end
    else if (delayBlockG_useSavedData) begin
      x_reS = delayBlockG_savedData_Xre;
    end
    else if (MemDoVld) begin
      x_reS = x_re;
    end
    else begin
      x_reS = delayBlockG_xre_1_dly1;
    end
    if (useDlyData) begin
      x_imS = delayBlockG_xim_1_dly1;
    end
    else if (delayBlockG_useSavedData_dly) begin
      x_imS = delayBlockG_savedData_Xim;
    end
    else begin
      x_imS = delayBlockG_xim_1_dly1;
    end
    delayBlockG_useSavedData_dly_next = delayBlockG_useSavedData;
    case ( delayBlockG_delayState)
      1'b0 :
        begin
          delayBlockG_useSavedData_next = 1'b0;
          if (useDlyData) begin
            delayBlockG_delayState_next = 1'b0;
          end
          else if (MemDoVld) begin
            delayBlockG_delayState_next = 1'b1;
          end
        end
      1'b1 :
        begin
          if (MemDoVld && procEnb) begin
            delayBlockG_delayState_next = 1'b0;
            delayBlockG_useSavedData_next = 1'b0;
          end
          else if (MemDoVld && ( ! procEnb)) begin
            delayBlockG_savedData_Xre_next = delayBlockG_xre_1_dly1;
            delayBlockG_savedData_Xim_next = delayBlockG_xim_1_dly1;
            delayBlockG_savedData_Yim_next = delayBlockG_yim_dly1;
            delayBlockG_useSavedData_next = 1'b1;
          end
          else if (( ! MemDoVld) && procEnb) begin
            delayBlockG_delayState_next = 1'b0;
            delayBlockG_useSavedData_next = 1'b0;
          end
          else begin
            delayBlockG_delayState_next = 1'b1;
          end
        end
      default :
        begin
          delayBlockG_delayState_next = 1'b0;
          delayBlockG_useSavedData_next = 1'b0;
          delayBlockG_savedData_Xre_next = 16'sb0000000000000000;
          delayBlockG_savedData_Xim_next = 16'sb0000000000000000;
          delayBlockG_savedData_Yim_next = 16'sb0000000000000000;
        end
    endcase
    delayBlockG_yre_dly2_next = delayBlockG_yre_dly1;
    if (MemDoVld && ( ! holdData)) begin
      delayBlockG_yre_dly1_next = x_re;
    end
    delayBlockG_yim_dly2_next = delayBlockG_yim_dly1;
    if (MemDoVld && ( ! holdData)) begin
      delayBlockG_yim_dly1_next = x_im;
    end
    delayBlockG_dinre_dly2_next = delayBlockG_dinre_dly1;
    if (dout_vld3) begin
      delayBlockG_dinre_dly1_next = dout_re3;
    end
    delayBlockG_dinim_dly2_next = delayBlockG_dinim_dly1;
    if (dout_vld3) begin
      delayBlockG_dinim_dly1_next = dout_im3;
    end
    if (MemDoVld) begin
      delayBlockG_xre_1_dly1_next = x_re;
      delayBlockG_xim_1_dly1_next = x_im;
    end
    x_re_dly1 = delayBlockG_yre_dly1;
    x_re_dly2 = delayBlockG_yre_dly2;
    x_im_dly2 = delayBlockG_yim_dly2;
    din_re_dly1 = delayBlockG_dinre_dly1;
    din_im_dly1 = delayBlockG_dinim_dly1;
    din_re_dly2 = delayBlockG_dinre_dly2;
    din_im_dly2 = delayBlockG_dinim_dly2;
  end



  // CommutatorG
  always @(posedge clk)
    begin : commutatorG_process
      if (reset == 1'b1) begin
        commutatorG_procEnb_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          commutatorG_procEnb_dly <= commutatorG_procEnb_dly_next;
        end
      end
    end

  always @(commutatorG_procEnb_dly, procEnb, useDlyData, dout_re3, dout_im3, din_re_dly1,
       din_im_dly1, x_reS, x_imS, x_re_dly1, x_im_dly1, x_re_dly2, x_im_dly2) begin
    extended_dvld = procEnb || commutatorG_procEnb_dly;
    commutatorG_procEnb_dly_next = procEnb;
    if (procEnb) begin
      x_u_in = x_reS;
    end
    else begin
      x_u_in = x_imS;
    end
    if (useDlyData) begin
      if (procEnb) begin
        y_v_in = x_re_dly1;
        v_y_in = x_im_dly1;
      end
      else begin
        y_v_in = x_im_dly2;
        v_y_in = x_re_dly2;
      end
    end
    else if (procEnb) begin
      y_v_in = dout_re3;
      v_y_in = dout_im3;
    end
    else begin
      y_v_in = din_im_dly1;
      v_y_in = din_re_dly1;
    end
  end



  Radix2ButterflyG   u_ButterflyG   (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .stageIn_4(stageIn_4),  // ufix3
                                     .procEnb(procEnb),
                                     .twdl_re(twdl_re),  // sfix16_En14
                                     .twdl_im(twdl_im),  // sfix16_En14
                                     .x_u_in(x_u_in),  // sfix16
                                     .y_v_in(y_v_in),  // sfix16
                                     .v_y_in(v_y_in),  // sfix16
                                     .extended_dvld(extended_dvld),
                                     .softReset(softReset),
                                     .stageOut_4(stageOut_4),  // ufix3
                                     .x_out(x_out),  // sfix34_En14
                                     .u_out(u_out),  // sfix34_En14
                                     .y_out(y_out),  // sfix34_En14
                                     .v_out(v_out),  // sfix34_En14
                                     .realOut_dvld(realOut_dvld),
                                     .doutVld(doutVld)
                                     );

  // outputMuxG
  always @(posedge clk)
    begin : outputMuxG_process
      if (reset == 1'b1) begin
        outputMuxG_x_out_dly <= 16'sb0000000000000000;
        outputMuxG_y_out_dly <= 16'sb0000000000000000;
        outputMuxG_doutvld <= 1'b0;
        outputMuxG_realOut_vld_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          outputMuxG_x_out_dly <= outputMuxG_x_out_dly_next;
          outputMuxG_y_out_dly <= outputMuxG_y_out_dly_next;
          outputMuxG_doutvld <= outputMuxG_doutvld_next;
          outputMuxG_realOut_vld_dly <= outputMuxG_realOut_vld_dly_next;
        end
      end
    end

  always @(outputMuxG_x_out_dly, outputMuxG_y_out_dly, outputMuxG_doutvld,
       outputMuxG_realOut_vld_dly, doutVld, realOut_dvld, x_out, y_out, u_out,
       v_out) begin
    if (outputMuxG_doutvld) begin
      if (outputMuxG_realOut_vld_dly) begin
        dout_re4_1 = outputMuxG_x_out_dly;
        outputMuxG_in4_0 = u_out >>> 8'd1;
        dout_im4_1 = outputMuxG_in4_0[29:14];
      end
      else begin
        dout_re4_1 = outputMuxG_y_out_dly;
        outputMuxG_in5_0 = v_out >>> 8'd1;
        dout_im4_1 = outputMuxG_in5_0[29:14];
      end
    end
    else begin
      dout_re4_1 = 16'sb0000000000000000;
      dout_im4_1 = 16'sb0000000000000000;
    end
    outputMuxG_in2_0 = x_out >>> 8'd1;
    outputMuxG_x_out_dly_next = outputMuxG_in2_0[29:14];
    outputMuxG_in3_0 = y_out >>> 8'd1;
    outputMuxG_y_out_dly_next = outputMuxG_in3_0[29:14];
    outputMuxG_doutvld_next = doutVld;
    outputMuxG_realOut_vld_dly_next = realOut_dvld;
    dout_vld4_1 = outputMuxG_doutvld;
  end



  assign twiddleAddr_4 = twiddleAddr_4_1;

  assign dout_re4 = dout_re4_1;

  assign dout_im4 = dout_im4_1;

  assign dout_vld4 = dout_vld4_1;

endmodule  // RADIX2FFT_KernelG

