// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_st\SimpleDualPortRAM_128x32b.v
// Created: 2014-11-25 15:16:15
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SimpleDualPortRAM_128x32b
// Source Path: fft_st/fft_st/HDL FIFO/HDL FIFO_ram_128x32b/SimpleDualPortRAM_128x32b
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SimpleDualPortRAM_128x32b
          (
           clk,
           enb,
           wr_din_re,
           wr_din_im,
           wr_addr,
           wr_en,
           rd_addr,
           rd_dout_re,
           rd_dout_im
          );


  input   clk;
  input   enb;
  input   signed [15:0] wr_din_re;  // int16
  input   signed [15:0] wr_din_im;  // int16
  input   [6:0] wr_addr;  // ufix7
  input   wr_en;  // ufix1
  input   [6:0] rd_addr;  // ufix7
  output  signed [15:0] rd_dout_re;  // int16
  output  signed [15:0] rd_dout_im;  // int16

  parameter addr_width = 3'd7;
  parameter data_width = 6'd32;

  reg  [data_width - 1:0] ram [2**addr_width - 1:0];
  reg  [data_width - 1:0] data_int;
  integer i;

  initial begin
    for (i=0; i<=2**addr_width - 1; i=i+1) begin
      ram[i] = 0;
    end
    data_int = 0;
  end


  always @(posedge clk)
    begin : SimpleDualPortRAM_128x32b_process
      if (enb == 1'b1) begin
        if (wr_en == 1'b1) begin
          ram[wr_addr] <= {wr_din_re, wr_din_im};
        end
        data_int <= ram[rd_addr];
      end
    end

  assign rd_dout_re = data_int[data_width-1:data_width/2];
  assign rd_dout_im = data_int[data_width/2-1:0];

endmodule  // SimpleDualPortRAM_128x32b

