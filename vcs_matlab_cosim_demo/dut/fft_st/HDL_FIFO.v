// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_st\HDL_FIFO.v
// Created: 2014-11-25 15:16:15
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_FIFO
// Source Path: fft_st/fft_st/HDL FIFO
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_FIFO
          (
           clk,
           reset,
           enb,
           In_re,
           In_im,
           Push,
           Pop,
           Out_re,
           Out_im,
           Empty,
           Num
          );


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_re;  // int16
  input   signed [15:0] In_im;  // int16
  input   Push;
  input   Pop;
  output  signed [15:0] Out_re;  // int16
  output  signed [15:0] Out_im;  // int16
  output  Empty;  // ufix1
  output  [7:0] Num;  // ufix8


  reg [6:0] fifo_front_indx;  // ufix7
  reg [6:0] fifo_front_dir;  // ufix7
  reg [6:0] fifo_back_indx;  // ufix7
  reg [6:0] fifo_back_dir;  // ufix7
  reg [7:0] fifo_sample_count;  // ufix8
  wire [6:0] fifo_front_indx_next;  // ufix7
  wire [6:0] fifo_front_dir_next;  // ufix7
  wire [6:0] fifo_back_indx_next;  // ufix7
  wire [6:0] fifo_back_dir_next;  // ufix7
  wire [7:0] fifo_sample_count_next;  // ufix8
  wire fifo_out3;
  wire fifo_out4;
  wire fifo_out1;
  wire fifo_1;
  wire [6:0] fifo_front_indx_temp;  // ufix7
  wire [6:0] fifo_back_indx_temp;  // ufix7
  wire [6:0] w_waddr;  // ufix7
  wire w_we;  // ufix1
  wire [6:0] w_raddr;  // ufix7
  wire w_full;  // ufix1
  wire w_cz;
  wire w_const;  // ufix1
  wire w_mux1;  // ufix1
  reg  w_d1;  // ufix1
  wire signed [15:0] w_waddr_re;  // int16
  wire signed [15:0] w_waddr_im;  // int16
  reg signed [15:0] w_d2_re;  // int16
  reg signed [15:0] w_d2_im;  // int16
  wire signed [15:0] w_out_re;  // int16
  wire signed [15:0] w_out_im;  // int16


  // FIFO logic controller
  always @(posedge clk)
    begin : fifo_process
      if (reset == 1'b1) begin
        fifo_front_indx <= 7'b0000000;
        fifo_front_dir <= 7'b0000001;
        fifo_back_indx <= 7'b0000000;
        fifo_back_dir <= 7'b0000001;
        fifo_sample_count <= 8'b00000000;
      end
      else begin
        if (enb) begin
          fifo_front_indx <= fifo_front_indx_next;
          fifo_front_dir <= fifo_front_dir_next;
          fifo_back_indx <= fifo_back_indx_next;
          fifo_back_dir <= fifo_back_dir_next;
          fifo_sample_count <= fifo_sample_count_next;
        end
      end
    end

  assign fifo_out4 = fifo_sample_count == 8'b10000000;
  assign fifo_out3 = fifo_sample_count == 8'b00000000;
  assign fifo_out1 = Push && (Pop || ( ! fifo_out4));
  assign fifo_1 = Pop && ( ! fifo_out3);
  assign fifo_front_indx_temp = (fifo_1 ? fifo_front_indx + fifo_front_dir :
              fifo_front_indx);
  assign fifo_front_dir_next = (fifo_front_indx_temp == 7'b1111111 ? 7'b0000001 :
              7'b0000001);
  assign fifo_back_indx_temp = (fifo_out1 ? fifo_back_indx + fifo_back_dir :
              fifo_back_indx);
  assign fifo_back_dir_next = (fifo_back_indx_temp == 7'b1111111 ? 7'b0000001 :
              7'b0000001);
  assign fifo_sample_count_next = (fifo_out1 && ( ! fifo_1) ? fifo_sample_count + 8'b00000001 :
              (( ! fifo_out1) && fifo_1 ? fifo_sample_count + 8'b11111111 :
              fifo_sample_count));
  assign w_waddr = fifo_back_indx;
  assign w_we = fifo_out1;
  assign w_raddr = fifo_front_indx;
  assign Empty = fifo_out3;
  assign w_full = fifo_out4;
  assign Num = fifo_sample_count;
  assign fifo_front_indx_next = fifo_front_indx_temp;
  assign fifo_back_indx_next = fifo_back_indx_temp;



  assign w_cz = Num > 8'b00000000;



  assign w_const = 1'b0;



  assign w_mux1 = (w_cz == 1'b0 ? w_const :
              Pop);



  always @(posedge clk)
    begin : f_d1_process
      if (reset == 1'b1) begin
        w_d1 <= 1'b0;
      end
      else begin
        if (enb) begin
          w_d1 <= w_mux1;
        end
      end
    end



  // us2: Upsample by 1, Sample offset 0 
  // 
  // us3: Upsample by 1, Sample offset 0 
  // 
  // us1: Upsample by 1, Sample offset 0 
  HDL_FIFO_ram_128x32b   u_HDL_FIFO_ram_128x32b   (.clk(clk),
                                                   .enb(enb),
                                                   .wr_din_re(In_re),  // int16
                                                   .wr_din_im(In_im),  // int16
                                                   .wr_addr(w_waddr),  // ufix7
                                                   .wr_en(w_we),  // ufix1
                                                   .rd_addr(w_raddr),  // ufix7
                                                   .rd_dout_re(w_waddr_re),  // int16
                                                   .rd_dout_im(w_waddr_im)  // int16
                                                   );

  always @(posedge clk)
    begin : f_d2_process
      if (reset == 1'b1) begin
        w_d2_re <= 16'sb0000000000000000;
        w_d2_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb && w_d1) begin
          w_d2_re <= w_waddr_re;
          w_d2_im <= w_waddr_im;
        end
      end
    end



  assign w_out_re = (w_d1 == 1'b0 ? w_d2_re :
              w_waddr_re);
  assign w_out_im = (w_d1 == 1'b0 ? w_d2_im :
              w_waddr_im);



  assign Out_re = w_out_re;

  assign Out_im = w_out_im;

endmodule  // HDL_FIFO

