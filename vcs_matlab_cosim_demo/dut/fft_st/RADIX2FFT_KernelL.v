// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_st\RADIX2FFT_KernelL.v
// Created: 2014-11-25 15:16:15
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX2FFT_KernelL
// Source Path: fft_st/fft_st/FFT HDL Optimized/RADIX2FFT_KernelL
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX2FFT_KernelL
          (
           clk,
           reset,
           enb,
           stageIn_6,
           twiddle_re_6,
           twiddle_im_6,
           dout_re5,
           dout_im5,
           dout_vld5,
           softReset,
           stageOut_6,
           twiddleAddr_6,
           dout_re6,
           dout_im6,
           dout_vld6
          );


  input   clk;
  input   reset;
  input   enb;
  input   [2:0] stageIn_6;  // ufix3
  input   signed [15:0] twiddle_re_6;  // sfix16_En14
  input   signed [15:0] twiddle_im_6;  // sfix16_En14
  input   signed [15:0] dout_re5;  // sfix16
  input   signed [15:0] dout_im5;  // sfix16
  input   dout_vld5;
  input   softReset;
  output  [2:0] stageOut_6;  // ufix3
  output  [2:0] twiddleAddr_6;  // ufix3
  output  signed [15:0] dout_re6;  // sfix16
  output  signed [15:0] dout_im6;  // sfix16
  output  dout_vld6;


  reg [1:0] wrStateMachineL_wrState;  // ufix2
  reg  wrStateMachineL_curWrEnb_1;
  reg [1:0] wrStateMachineL_curWrAddr_1;  // ufix2
  reg  wrStateMachineL_curWrEnb_2;
  reg [1:0] wrStateMachineL_curWrAddr_2;  // ufix2
  reg [1:0] wrStateMachineL_wrState_next;  // ufix2
  reg  wrStateMachineL_curWrEnb_1_next;
  reg [1:0] wrStateMachineL_curWrAddr_1_next;  // ufix2
  reg  wrStateMachineL_curWrEnb_2_next;
  reg [1:0] wrStateMachineL_curWrAddr_2_next;  // ufix2
  reg  WrEnb_1;
  reg [1:0] wrAddr_1;  // ufix2
  reg  WrEnb_2;
  reg [1:0] wrAddr_2;  // ufix2
  reg [2:0] rdStateMachineL_rdState;  // ufix3
  reg [1:0] rdStateMachineL_curRdAddr_1;  // ufix2
  reg [1:0] rdStateMachineL_curRdAddr_2;  // ufix2
  reg  rdStateMachineL_curDataVld;
  reg  rdStateMachineL_curRdEnb_1;
  reg  rdStateMachineL_curRdEnb_2;
  reg  rdStateMachineL_curUseDlyData_1;
  reg  rdStateMachineL_curUseDlyData_2;
  reg  rdStateMachineL_curUseMemData;
  reg [5:0] rdStateMachineL_sampleCnt;  // ufix6
  reg  rdStateMachineL_EOF;
  reg  rdStateMachineL_EOF_ACK;
  reg [2:0] rdStateMachineL_rdState_next;  // ufix3
  reg [1:0] rdStateMachineL_curRdAddr_1_next;  // ufix2
  reg [1:0] rdStateMachineL_curRdAddr_2_next;  // ufix2
  reg  rdStateMachineL_curDataVld_next;
  reg  rdStateMachineL_curRdEnb_1_next;
  reg  rdStateMachineL_curRdEnb_2_next;
  reg  rdStateMachineL_curUseDlyData_1_next;
  reg  rdStateMachineL_curUseDlyData_2_next;
  reg  rdStateMachineL_curUseMemData_next;
  reg [5:0] rdStateMachineL_sampleCnt_next;  // ufix6
  reg  rdStateMachineL_EOF_next;
  reg  rdStateMachineL_EOF_ACK_next;
  reg [1:0] rdAddr_1;  // ufix2
  reg [1:0] rdAddr_2;  // ufix2
  reg  procEnb;
  reg  realIn_vld;
  reg  rdEnb_1;
  reg  rdEnb_2;
  reg  twdlRdEnb;
  reg  useDlyData_1;
  reg  useDlyData_2;
  reg  twdlDly;
  reg  useMemData;
  wire signed [15:0] x_re;  // sfix16
  wire signed [15:0] x_im;  // sfix16
  wire signed [15:0] y_re;  // sfix16
  wire signed [15:0] y_im;  // sfix16
  reg signed [15:0] delayBlockL_xre_dly1;  // sfix16
  reg signed [15:0] delayBlockL_xim_dly1;  // sfix16
  reg signed [15:0] delayBlockL_xre_dly2;  // sfix16
  reg signed [15:0] delayBlockL_xim_dly2;  // sfix16
  reg signed [15:0] delayBlockL_yre_dly1;  // sfix16
  reg signed [15:0] delayBlockL_yim_dly1;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly1;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly1;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly2;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly2;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly3;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly3;  // sfix16
  reg  delayBlockL_realIn_vld_dly;
  reg signed [15:0] delayBlockL_xre_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_xim_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_xre_dly2_next;  // sfix16
  reg signed [15:0] delayBlockL_xim_dly2_next;  // sfix16
  reg signed [15:0] delayBlockL_yre_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_yim_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly1_next;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly2_next;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly2_next;  // sfix16
  reg signed [15:0] delayBlockL_dinim_dly3_next;  // sfix16
  reg signed [15:0] delayBlockL_dinre_dly3_next;  // sfix16
  reg  delayBlockL_realIn_vld_dly_next;
  reg signed [15:0] x_re_dly1;  // sfix16
  reg signed [15:0] x_im_dly1;  // sfix16
  reg signed [15:0] x_re_dly2;  // sfix16
  reg signed [15:0] x_im_dly2;  // sfix16
  reg signed [15:0] y_re_dly1;  // sfix16
  reg signed [15:0] y_im_dly1;  // sfix16
  reg signed [15:0] din_re_dly1;  // sfix16
  reg signed [15:0] din_im_dly1;  // sfix16
  reg signed [15:0] din_re_dly2;  // sfix16
  reg signed [15:0] din_im_dly2;  // sfix16
  reg signed [15:0] din_re_dly3;  // sfix16
  reg signed [15:0] din_im_dly3;  // sfix16
  wire zeroS;
  reg [4:0] twiddleAddrG_twiddleAddrReg_1;  // ufix5
  reg [4:0] twiddleAddrG_twiddleAddrReg_2;  // ufix5
  reg [2:0] twiddleAddrG_twdlDataMapReg;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg1;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg2;  // ufix3
  reg  twiddleAddrG_useInterData;
  reg  twiddleAddrG_useInterDataReg1;
  reg  twiddleAddrG_useInterDataReg2;
  reg  twiddleAddrG_twdlAddrPhase_1;
  reg signed [15:0] twiddleAddrG_twdl_reI_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reI_reg1;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg1;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reI_reg2;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imI_reg2;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_regP;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_regP;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_regN;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_regN;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_reX_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_imX_reg;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_re_dly;  // sfix16
  reg signed [15:0] twiddleAddrG_twdl_im_dly;  // sfix16
  reg  twiddleAddrG_procEnbReg;
  reg [4:0] twiddleAddrG_twiddleAddrReg_1_next;  // ufix5
  reg [4:0] twiddleAddrG_twiddleAddrReg_2_next;  // ufix5
  reg [2:0] twiddleAddrG_twdlDataMapReg_next;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg1_next;  // ufix3
  reg [2:0] twiddleAddrG_twdlDataMapReg2_next;  // ufix3
  reg  twiddleAddrG_useInterData_next;
  reg  twiddleAddrG_useInterDataReg1_next;
  reg  twiddleAddrG_useInterDataReg2_next;
  reg  twiddleAddrG_twdlAddrPhase_1_next;
  reg signed [15:0] twiddleAddrG_twdl_reI_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reI_reg1_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg1_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reI_reg2_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imI_reg2_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_regP_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_regP_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_regN_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_regN_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_reX_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_reg_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_re_dly_next;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_im_dly_next;  // sfix16_En14
  reg  twiddleAddrG_procEnbReg_next;
  reg [2:0] twiddleAddr_6_1;  // ufix3
  reg signed [15:0] twdl_re;  // sfix16_En14
  reg signed [15:0] twdl_im;  // sfix16_En14
  reg  commutatorL_realIn_vld_dly1;
  reg signed [15:0] commutatorL_yv_in;  // sfix16
  reg signed [15:0] commutatorL_vy_in;  // sfix16
  reg signed [15:0] commutatorL_twdlRe_dly;  // sfix16
  reg signed [15:0] commutatorL_twdlIm_dly;  // sfix16
  reg signed [15:0] commutatorL_x_re_dly1;  // sfix16
  reg signed [15:0] commutatorL_x_im_dly2;  // sfix16
  reg  commutatorL_procEnb_dly;
  reg  commutatorL_procEnb_dly1;
  reg  commutatorL_realIn_vld_dly1_next;
  reg signed [15:0] commutatorL_yv_in_next;  // sfix16
  reg signed [15:0] commutatorL_vy_in_next;  // sfix16
  reg signed [15:0] commutatorL_twdlRe_dly_next;  // sfix16_En14
  reg signed [15:0] commutatorL_twdlIm_dly_next;  // sfix16_En14
  reg signed [15:0] commutatorL_x_re_dly1_next;  // sfix16
  reg signed [15:0] commutatorL_x_im_dly2_next;  // sfix16
  reg  commutatorL_procEnb_dly_next;
  reg  commutatorL_procEnb_dly1_next;
  reg signed [15:0] x_u_in;  // sfix16
  reg signed [15:0] y_v_in;  // sfix16
  reg signed [15:0] v_y_in;  // sfix16
  reg signed [15:0] twdl_re_dly;  // sfix16_En14
  reg signed [15:0] twdl_im_dly;  // sfix16_En14
  reg  extended_dvld;
  reg  procEnbReg;
  wire signed [33:0] x_out;  // sfix34_En14
  wire signed [33:0] u_out;  // sfix34_En14
  wire signed [33:0] y_out;  // sfix34_En14
  wire signed [33:0] v_out;  // sfix34_En14
  wire realOut_dvld;
  wire doutVld;
  reg signed [15:0] outputMuxL_x_out_dly;  // sfix16
  reg signed [15:0] outputMuxL_y_out_dly;  // sfix16
  reg  outputMuxL_doutvld;
  reg  outputMuxL_doutvld_reg;
  reg signed [15:0] outputMuxL_dout_re_reg;  // sfix16
  reg signed [15:0] outputMuxL_dout_im_reg;  // sfix16
  reg  outputMuxL_realOut_vld_dly;
  reg signed [15:0] outputMuxL_x_out_dly_next;  // sfix16
  reg signed [15:0] outputMuxL_y_out_dly_next;  // sfix16
  reg  outputMuxL_doutvld_next;
  reg  outputMuxL_doutvld_reg_next;
  reg signed [15:0] outputMuxL_dout_re_reg_next;  // sfix16
  reg signed [15:0] outputMuxL_dout_im_reg_next;  // sfix16
  reg  outputMuxL_realOut_vld_dly_next;
  reg signed [15:0] dout_re6_1;  // sfix16
  reg signed [15:0] dout_im6_1;  // sfix16
  reg  dout_vld6_1;
  reg  rdStateMachineL_dataRdEnb_1;
  reg [4:0] twiddleAddrG_twdlAddr_raw;  // ufix5
  reg [3:0] twiddleAddrG_twdlAddrMap;  // ufix4
  reg signed [15:0] twiddleAddrG_twdl_reX_reg2;  // sfix16_En14
  reg signed [15:0] twiddleAddrG_twdl_imX_reg2;  // sfix16_En14
  reg [1:0] twiddleAddrG_c;  // ufix2
  reg [6:0] twiddleAddrG_sub_temp;  // ufix7
  reg [2:0] twiddleAddrG_cast;  // ufix3
  reg signed [16:0] twiddleAddrG_cast_0;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_1;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_2;  // sfix17_En14
  reg signed [16:0] twiddleAddrG_cast_3;  // sfix17_En14
  reg [4:0] twiddleAddrG_t_0_0;  // ufix5
  reg [6:0] twiddleAddrG_t_1;  // ufix7
  reg [4:0] twiddleAddrG_t_2_0;  // ufix5
  reg [5:0] twiddleAddrG_t_3;  // ufix6
  reg [5:0] twiddleAddrG_sub_temp_0;  // ufix6
  reg signed [33:0] outputMuxL_in2_0;  // sfix34_En14
  reg signed [33:0] outputMuxL_in4_0;  // sfix34_En14
  reg signed [33:0] outputMuxL_in5_0;  // sfix34_En14
  reg signed [33:0] outputMuxL_in3_0;  // sfix34_En14


  // wrStateMachineL
  always @(posedge clk)
    begin : wrStateMachineL_process
      if (reset == 1'b1) begin
        wrStateMachineL_wrState <= 2'b00;
        wrStateMachineL_curWrEnb_1 <= 1'b1;
        wrStateMachineL_curWrAddr_1 <= 2'b01;
        wrStateMachineL_curWrEnb_2 <= 1'b0;
        wrStateMachineL_curWrAddr_2 <= 2'b01;
      end
      else begin
        if (enb) begin
          wrStateMachineL_wrState <= wrStateMachineL_wrState_next;
          wrStateMachineL_curWrEnb_1 <= wrStateMachineL_curWrEnb_1_next;
          wrStateMachineL_curWrAddr_1 <= wrStateMachineL_curWrAddr_1_next;
          wrStateMachineL_curWrEnb_2 <= wrStateMachineL_curWrEnb_2_next;
          wrStateMachineL_curWrAddr_2 <= wrStateMachineL_curWrAddr_2_next;
        end
      end
    end

  always @(wrStateMachineL_wrState, wrStateMachineL_curWrEnb_1,
       wrStateMachineL_curWrAddr_1, wrStateMachineL_curWrEnb_2,
       wrStateMachineL_curWrAddr_2, dout_vld5) begin
    wrStateMachineL_wrState_next = wrStateMachineL_wrState;
    wrStateMachineL_curWrEnb_1_next = wrStateMachineL_curWrEnb_1;
    wrStateMachineL_curWrAddr_1_next = wrStateMachineL_curWrAddr_1;
    wrStateMachineL_curWrEnb_2_next = wrStateMachineL_curWrEnb_2;
    wrStateMachineL_curWrAddr_2_next = wrStateMachineL_curWrAddr_2;
    WrEnb_1 = wrStateMachineL_curWrEnb_1 && dout_vld5;
    WrEnb_2 = wrStateMachineL_curWrEnb_2 && dout_vld5;
    case ( wrStateMachineL_wrState)
      2'b00 :
        begin
          wrStateMachineL_curWrEnb_1_next = 1'b1;
          wrStateMachineL_curWrEnb_2_next = 1'b0;
          wrStateMachineL_curWrAddr_1_next = 2'b00;
          wrStateMachineL_curWrAddr_2_next = 2'b00;
          if (dout_vld5) begin
            wrStateMachineL_wrState_next = 2'b01;
            wrStateMachineL_curWrAddr_1_next = 2'b01;
            wrStateMachineL_curWrEnb_1_next = 1'b1;
          end
        end
      2'b01 :
        begin
          if (dout_vld5) begin
            if (wrStateMachineL_curWrAddr_1 == 2'b11) begin
              wrStateMachineL_curWrAddr_1_next = 2'b01;
              wrStateMachineL_curWrEnb_1_next = 1'b0;
              wrStateMachineL_wrState_next = 2'b10;
            end
            else begin
              wrStateMachineL_curWrAddr_1_next = wrStateMachineL_curWrAddr_1 + 2'b01;
              wrStateMachineL_curWrEnb_1_next = 1'b1;
            end
          end
        end
      2'b10 :
        begin
          if (dout_vld5) begin
            if (wrStateMachineL_curWrAddr_1 == 2'b11) begin
              wrStateMachineL_wrState_next = 2'b11;
              wrStateMachineL_curWrAddr_1_next = 2'b00;
              wrStateMachineL_curWrAddr_2_next = 2'b00;
              wrStateMachineL_curWrEnb_2_next = 1'b1;
            end
            else begin
              wrStateMachineL_curWrAddr_1_next = wrStateMachineL_curWrAddr_1 + 2'b01;
            end
          end
        end
      2'b11 :
        begin
          if (dout_vld5) begin
            wrStateMachineL_curWrEnb_2_next = 1'b1;
            if (wrStateMachineL_curWrAddr_2 == 2'b00) begin
              wrStateMachineL_curWrAddr_2_next = 2'b00;
              wrStateMachineL_curWrEnb_1_next = 1'b1;
              wrStateMachineL_curWrEnb_2_next = 1'b0;
              wrStateMachineL_wrState_next = 2'b01;
            end
            else begin
              wrStateMachineL_curWrAddr_2_next = wrStateMachineL_curWrAddr_2 + 2'b01;
            end
          end
        end
      default :
        begin
          wrStateMachineL_wrState_next = 2'b00;
          wrStateMachineL_curWrAddr_1_next = 2'b00;
          wrStateMachineL_curWrEnb_1_next = dout_vld5;
          wrStateMachineL_curWrAddr_2_next = 2'b00;
          wrStateMachineL_curWrEnb_2_next = 1'b0;
        end
    endcase
    wrAddr_1 = wrStateMachineL_curWrAddr_1;
    wrAddr_2 = wrStateMachineL_curWrAddr_2;
  end



  // rdStateMachineL
  always @(posedge clk)
    begin : rdStateMachineL_process
      if (reset == 1'b1) begin
        rdStateMachineL_rdState <= 3'b000;
        rdStateMachineL_curRdAddr_1 <= 2'b00;
        rdStateMachineL_curRdAddr_2 <= 2'b11;
        rdStateMachineL_curDataVld <= 1'b0;
        rdStateMachineL_curRdEnb_1 <= 1'b0;
        rdStateMachineL_curUseDlyData_1 <= 1'b0;
        rdStateMachineL_curRdEnb_2 <= 1'b0;
        rdStateMachineL_curUseDlyData_2 <= 1'b0;
        rdStateMachineL_curUseMemData <= 1'b0;
        rdStateMachineL_sampleCnt <= 6'b000000;
        rdStateMachineL_EOF <= 1'b0;
        rdStateMachineL_EOF_ACK <= 1'b0;
      end
      else begin
        if (enb) begin
          rdStateMachineL_rdState <= rdStateMachineL_rdState_next;
          rdStateMachineL_curRdAddr_1 <= rdStateMachineL_curRdAddr_1_next;
          rdStateMachineL_curRdAddr_2 <= rdStateMachineL_curRdAddr_2_next;
          rdStateMachineL_curDataVld <= rdStateMachineL_curDataVld_next;
          rdStateMachineL_curRdEnb_1 <= rdStateMachineL_curRdEnb_1_next;
          rdStateMachineL_curRdEnb_2 <= rdStateMachineL_curRdEnb_2_next;
          rdStateMachineL_curUseDlyData_1 <= rdStateMachineL_curUseDlyData_1_next;
          rdStateMachineL_curUseDlyData_2 <= rdStateMachineL_curUseDlyData_2_next;
          rdStateMachineL_curUseMemData <= rdStateMachineL_curUseMemData_next;
          rdStateMachineL_sampleCnt <= rdStateMachineL_sampleCnt_next;
          rdStateMachineL_EOF <= rdStateMachineL_EOF_next;
          rdStateMachineL_EOF_ACK <= rdStateMachineL_EOF_ACK_next;
        end
      end
    end

  always @(rdStateMachineL_rdState, rdStateMachineL_curRdAddr_1,
       rdStateMachineL_curRdAddr_2, rdStateMachineL_curDataVld,
       rdStateMachineL_curRdEnb_1, rdStateMachineL_curRdEnb_2,
       rdStateMachineL_curUseDlyData_1, rdStateMachineL_curUseDlyData_2,
       rdStateMachineL_curUseMemData, rdStateMachineL_sampleCnt,
       rdStateMachineL_EOF, rdStateMachineL_EOF_ACK, dout_vld5, wrAddr_1) begin
    twdlDly = 1'b0;
    rdStateMachineL_rdState_next = rdStateMachineL_rdState;
    rdStateMachineL_curRdAddr_1_next = rdStateMachineL_curRdAddr_1;
    rdStateMachineL_curRdAddr_2_next = rdStateMachineL_curRdAddr_2;
    rdStateMachineL_curDataVld_next = rdStateMachineL_curDataVld;
    rdStateMachineL_curUseDlyData_1_next = rdStateMachineL_curUseDlyData_1;
    rdStateMachineL_curUseDlyData_2_next = rdStateMachineL_curUseDlyData_2;
    rdStateMachineL_curUseMemData_next = rdStateMachineL_curUseMemData;
    rdStateMachineL_sampleCnt_next = rdStateMachineL_sampleCnt;
    rdStateMachineL_EOF_ACK_next = rdStateMachineL_EOF_ACK;
    procEnb = rdStateMachineL_curDataVld && ((dout_vld5 || rdStateMachineL_EOF) || rdStateMachineL_EOF_ACK);
    if (rdStateMachineL_EOF) begin
      rdStateMachineL_EOF_ACK_next = 1'b1;
    end
    else if (rdStateMachineL_rdState == 3'b000) begin
      rdStateMachineL_EOF_ACK_next = 1'b0;
    end
    case ( rdStateMachineL_rdState)
      3'b000 :
        begin
          rdStateMachineL_curUseDlyData_1_next = 1'b0;
          rdStateMachineL_curUseDlyData_2_next = 1'b0;
          rdStateMachineL_curRdAddr_2_next = 2'b11;
          rdStateMachineL_curRdEnb_2_next = 1'b0;
          if (dout_vld5 && (wrAddr_1 == 2'b10)) begin
            rdStateMachineL_curRdAddr_1_next = 2'b00;
            rdStateMachineL_dataRdEnb_1 = 1'b1;
            rdStateMachineL_curDataVld_next = 1'b0;
          end
          else if (dout_vld5 && (wrAddr_1 == 2'b11)) begin
            rdStateMachineL_rdState_next = 3'b001;
            rdStateMachineL_curDataVld_next = rdStateMachineL_curRdEnb_1;
            rdStateMachineL_dataRdEnb_1 = 1'b0;
            rdStateMachineL_curRdAddr_1_next = rdStateMachineL_curRdAddr_1 + 2'b01;
            rdStateMachineL_curUseMemData_next = 1'b0;
          end
          else begin
            rdStateMachineL_curRdAddr_1_next = 2'b00;
            rdStateMachineL_dataRdEnb_1 = 1'b0;
            rdStateMachineL_curDataVld_next = 1'b0;
          end
        end
      3'b001 :
        begin
          rdStateMachineL_curDataVld_next = rdStateMachineL_curRdEnb_1;
          rdStateMachineL_curRdEnb_2_next = rdStateMachineL_curRdEnb_2;
          if (rdStateMachineL_curRdEnb_1) begin
            rdStateMachineL_rdState_next = 3'b010;
            rdStateMachineL_curRdAddr_1_next = rdStateMachineL_curRdAddr_1 + 2'b01;
            rdStateMachineL_curUseDlyData_1_next = 1'b1;
            rdStateMachineL_dataRdEnb_1 = 1'b0;
          end
          else begin
            rdStateMachineL_dataRdEnb_1 = 1'b1;
          end
        end
      3'b010 :
        begin
          rdStateMachineL_curDataVld_next = rdStateMachineL_curRdEnb_1;
          rdStateMachineL_curRdEnb_2_next = rdStateMachineL_curRdEnb_2;
          if (rdStateMachineL_curRdEnb_1) begin
            rdStateMachineL_rdState_next = 3'b011;
            rdStateMachineL_dataRdEnb_1 = 1'b0;
            rdStateMachineL_curUseDlyData_1_next = 1'b0;
            rdStateMachineL_curUseDlyData_2_next = 1'b1;
          end
          else begin
            rdStateMachineL_dataRdEnb_1 = 1'b1;
          end
        end
      3'b011 :
        begin
          rdStateMachineL_curDataVld_next =  ! rdStateMachineL_curDataVld;
          if (rdStateMachineL_curRdAddr_1 == 2'b11) begin
            rdStateMachineL_curRdAddr_1_next = 2'b00;
            rdStateMachineL_rdState_next = 3'b000;
            rdStateMachineL_curUseMemData_next = 1'b0;
            rdStateMachineL_dataRdEnb_1 = 1'b0;
            rdStateMachineL_curRdEnb_2_next = 1'b0;
          end
          else begin
            rdStateMachineL_curRdAddr_1_next = rdStateMachineL_curRdAddr_1 + 2'b01;
            if (rdStateMachineL_curRdAddr_2 == 2'b00) begin
              rdStateMachineL_curRdAddr_2_next = 2'b11;
            end
            else begin
              rdStateMachineL_curRdAddr_2_next = rdStateMachineL_curRdAddr_2 + 2'b01;
            end
            rdStateMachineL_rdState_next = 3'b100;
            rdStateMachineL_dataRdEnb_1 = 1'b1;
            rdStateMachineL_curRdEnb_2_next = 1'b1;
          end
        end
      3'b100 :
        begin
          rdStateMachineL_curDataVld_next =  ! rdStateMachineL_curDataVld;
          rdStateMachineL_dataRdEnb_1 = 1'b0;
          rdStateMachineL_curRdEnb_2_next = 1'b0;
          rdStateMachineL_rdState_next = 3'b000;
          rdStateMachineL_curUseMemData_next = 1'b1;
          rdStateMachineL_curUseDlyData_2_next = 1'b0;
        end
      default :
        begin
          rdStateMachineL_curRdAddr_1_next = 2'b00;
          rdStateMachineL_curRdAddr_2_next = 2'b11;
          rdStateMachineL_dataRdEnb_1 = 1'b0;
          rdStateMachineL_curRdEnb_2_next = 1'b0;
          rdStateMachineL_curDataVld_next = 1'b0;
          rdStateMachineL_curUseDlyData_1_next = 1'b0;
          rdStateMachineL_curUseDlyData_2_next = 1'b0;
        end
    endcase
    rdStateMachineL_curRdEnb_1_next = rdStateMachineL_dataRdEnb_1;
    rdStateMachineL_EOF_next = 1'b0;
    if (dout_vld5 && (rdStateMachineL_sampleCnt == 6'b111111)) begin
      rdStateMachineL_EOF_next = 1'b1;
    end
    if (dout_vld5) begin
      rdStateMachineL_sampleCnt_next = rdStateMachineL_sampleCnt + 6'b000001;
    end
    rdAddr_1 = rdStateMachineL_curRdAddr_1;
    rdAddr_2 = rdStateMachineL_curRdAddr_2;
    realIn_vld = rdStateMachineL_curDataVld;
    rdEnb_1 = rdStateMachineL_curRdEnb_1;
    rdEnb_2 = rdStateMachineL_curRdEnb_2;
    twdlRdEnb = rdStateMachineL_dataRdEnb_1;
    useDlyData_1 = rdStateMachineL_curUseDlyData_1;
    useDlyData_2 = rdStateMachineL_curUseDlyData_2;
    useMemData = rdStateMachineL_curUseMemData;
  end



  dataMEM_re_4x16b   u_dataMEM_re_1   (.clk(clk),
                                       .enb(enb),
                                       .wr_din(dout_re5),  // sfix16
                                       .wr_addr(wrAddr_1),  // ufix2
                                       .wr_en(WrEnb_1),
                                       .rd_addr(rdAddr_1),  // ufix2
                                       .rd_dout(x_re)  // sfix16
                                       );

  dataMEM_re_4x16b   u_dataMEM_im_1   (.clk(clk),
                                       .enb(enb),
                                       .wr_din(dout_im5),  // sfix16
                                       .wr_addr(wrAddr_1),  // ufix2
                                       .wr_en(WrEnb_1),
                                       .rd_addr(rdAddr_1),  // ufix2
                                       .rd_dout(x_im)  // sfix16
                                       );

  dataMEM_re_4x16b   u_dataMEM_re_2   (.clk(clk),
                                       .enb(enb),
                                       .wr_din(dout_re5),  // sfix16
                                       .wr_addr(wrAddr_2),  // ufix2
                                       .wr_en(WrEnb_2),
                                       .rd_addr(rdAddr_2),  // ufix2
                                       .rd_dout(y_re)  // sfix16
                                       );

  dataMEM_re_4x16b   u_dataMEM_im_2   (.clk(clk),
                                       .enb(enb),
                                       .wr_din(dout_im5),  // sfix16
                                       .wr_addr(wrAddr_2),  // ufix2
                                       .wr_en(WrEnb_2),
                                       .rd_addr(rdAddr_2),  // ufix2
                                       .rd_dout(y_im)  // sfix16
                                       );

  // delayBlockL
  always @(posedge clk)
    begin : delayBlockL_process
      if (reset == 1'b1) begin
        delayBlockL_xre_dly1 <= 16'sb0000000000000000;
        delayBlockL_xim_dly1 <= 16'sb0000000000000000;
        delayBlockL_xre_dly2 <= 16'sb0000000000000000;
        delayBlockL_xim_dly2 <= 16'sb0000000000000000;
        delayBlockL_yre_dly1 <= 16'sb0000000000000000;
        delayBlockL_yim_dly1 <= 16'sb0000000000000000;
        delayBlockL_dinim_dly1 <= 16'sb0000000000000000;
        delayBlockL_dinre_dly1 <= 16'sb0000000000000000;
        delayBlockL_dinim_dly2 <= 16'sb0000000000000000;
        delayBlockL_dinre_dly2 <= 16'sb0000000000000000;
        delayBlockL_dinim_dly3 <= 16'sb0000000000000000;
        delayBlockL_dinre_dly3 <= 16'sb0000000000000000;
        delayBlockL_realIn_vld_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          delayBlockL_xre_dly1 <= delayBlockL_xre_dly1_next;
          delayBlockL_xim_dly1 <= delayBlockL_xim_dly1_next;
          delayBlockL_xre_dly2 <= delayBlockL_xre_dly2_next;
          delayBlockL_xim_dly2 <= delayBlockL_xim_dly2_next;
          delayBlockL_yre_dly1 <= delayBlockL_yre_dly1_next;
          delayBlockL_yim_dly1 <= delayBlockL_yim_dly1_next;
          delayBlockL_dinim_dly1 <= delayBlockL_dinim_dly1_next;
          delayBlockL_dinre_dly1 <= delayBlockL_dinre_dly1_next;
          delayBlockL_dinim_dly2 <= delayBlockL_dinim_dly2_next;
          delayBlockL_dinre_dly2 <= delayBlockL_dinre_dly2_next;
          delayBlockL_dinim_dly3 <= delayBlockL_dinim_dly3_next;
          delayBlockL_dinre_dly3 <= delayBlockL_dinre_dly3_next;
          delayBlockL_realIn_vld_dly <= delayBlockL_realIn_vld_dly_next;
        end
      end
    end

  always @(delayBlockL_xre_dly1, delayBlockL_xim_dly1, delayBlockL_xre_dly2,
       delayBlockL_xim_dly2, delayBlockL_yre_dly1, delayBlockL_yim_dly1,
       delayBlockL_dinim_dly1, delayBlockL_dinre_dly1, delayBlockL_dinim_dly2,
       delayBlockL_dinre_dly2, delayBlockL_dinim_dly3, delayBlockL_dinre_dly3,
       delayBlockL_realIn_vld_dly, realIn_vld, x_re, x_im, y_re, y_im, dout_re5,
       dout_im5, dout_vld5) begin
    delayBlockL_xre_dly1_next = delayBlockL_xre_dly1;
    delayBlockL_xim_dly1_next = delayBlockL_xim_dly1;
    delayBlockL_dinim_dly1_next = delayBlockL_dinim_dly1;
    delayBlockL_dinre_dly1_next = delayBlockL_dinre_dly1;
    delayBlockL_xre_dly2_next = delayBlockL_xre_dly1;
    if (realIn_vld && ( ! delayBlockL_realIn_vld_dly)) begin
      delayBlockL_xre_dly1_next = x_re;
    end
    delayBlockL_xim_dly2_next = delayBlockL_xim_dly1;
    if (realIn_vld && ( ! delayBlockL_realIn_vld_dly)) begin
      delayBlockL_xim_dly1_next = x_im;
    end
    delayBlockL_yre_dly1_next = y_re;
    delayBlockL_yim_dly1_next = y_im;
    delayBlockL_dinim_dly3_next = delayBlockL_dinim_dly2;
    delayBlockL_dinim_dly2_next = delayBlockL_dinim_dly1;
    if (dout_vld5) begin
      delayBlockL_dinim_dly1_next = dout_im5;
    end
    delayBlockL_dinre_dly3_next = delayBlockL_dinre_dly2;
    delayBlockL_dinre_dly2_next = delayBlockL_dinre_dly1;
    if (dout_vld5) begin
      delayBlockL_dinre_dly1_next = dout_re5;
    end
    delayBlockL_realIn_vld_dly_next = realIn_vld;
    x_re_dly1 = delayBlockL_xre_dly1;
    x_im_dly1 = delayBlockL_xim_dly1;
    x_re_dly2 = delayBlockL_xre_dly2;
    x_im_dly2 = delayBlockL_xim_dly2;
    y_re_dly1 = delayBlockL_yre_dly1;
    y_im_dly1 = delayBlockL_yim_dly1;
    din_re_dly1 = delayBlockL_dinre_dly1;
    din_im_dly1 = delayBlockL_dinim_dly1;
    din_re_dly2 = delayBlockL_dinre_dly2;
    din_im_dly2 = delayBlockL_dinim_dly2;
    din_re_dly3 = delayBlockL_dinre_dly3;
    din_im_dly3 = delayBlockL_dinim_dly3;
  end



  assign zeroS = 1'b0;



  // twiddleAddrG
  always @(posedge clk)
    begin : twiddleAddrG_process
      if (reset == 1'b1) begin
        twiddleAddrG_twiddleAddrReg_1 <= 5'b00000;
        twiddleAddrG_twiddleAddrReg_2 <= 5'b00000;
        twiddleAddrG_twdlDataMapReg <= 3'b000;
        twiddleAddrG_twdlDataMapReg1 <= 3'b000;
        twiddleAddrG_twdlDataMapReg2 <= 3'b000;
        twiddleAddrG_twdlAddrPhase_1 <= 1'b1;
        twiddleAddrG_useInterData <= 1'b0;
        twiddleAddrG_useInterDataReg1 <= 1'b0;
        twiddleAddrG_useInterDataReg2 <= 1'b0;
        twiddleAddrG_twdl_reI_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reI_reg1 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg1 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reI_reg2 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imI_reg2 <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_regP <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_regP <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_regN <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_regN <= 16'sb0000000000000000;
        twiddleAddrG_twdl_reX_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_imX_reg <= 16'sb0000000000000000;
        twiddleAddrG_twdl_re_dly <= 16'sb0000000000000000;
        twiddleAddrG_twdl_im_dly <= 16'sb0000000000000000;
        twiddleAddrG_procEnbReg <= 1'b0;
      end
      else begin
        if (enb) begin
          twiddleAddrG_twiddleAddrReg_1 <= twiddleAddrG_twiddleAddrReg_1_next;
          twiddleAddrG_twiddleAddrReg_2 <= twiddleAddrG_twiddleAddrReg_2_next;
          twiddleAddrG_twdlDataMapReg <= twiddleAddrG_twdlDataMapReg_next;
          twiddleAddrG_twdlDataMapReg1 <= twiddleAddrG_twdlDataMapReg1_next;
          twiddleAddrG_twdlDataMapReg2 <= twiddleAddrG_twdlDataMapReg2_next;
          twiddleAddrG_useInterData <= twiddleAddrG_useInterData_next;
          twiddleAddrG_useInterDataReg1 <= twiddleAddrG_useInterDataReg1_next;
          twiddleAddrG_useInterDataReg2 <= twiddleAddrG_useInterDataReg2_next;
          twiddleAddrG_twdlAddrPhase_1 <= twiddleAddrG_twdlAddrPhase_1_next;
          twiddleAddrG_twdl_reI_reg <= twiddleAddrG_twdl_reI_reg_next;
          twiddleAddrG_twdl_imI_reg <= twiddleAddrG_twdl_imI_reg_next;
          twiddleAddrG_twdl_reI_reg1 <= twiddleAddrG_twdl_reI_reg1_next;
          twiddleAddrG_twdl_imI_reg1 <= twiddleAddrG_twdl_imI_reg1_next;
          twiddleAddrG_twdl_reI_reg2 <= twiddleAddrG_twdl_reI_reg2_next;
          twiddleAddrG_twdl_imI_reg2 <= twiddleAddrG_twdl_imI_reg2_next;
          twiddleAddrG_twdl_reX_regP <= twiddleAddrG_twdl_reX_regP_next;
          twiddleAddrG_twdl_imX_regP <= twiddleAddrG_twdl_imX_regP_next;
          twiddleAddrG_twdl_reX_regN <= twiddleAddrG_twdl_reX_regN_next;
          twiddleAddrG_twdl_imX_regN <= twiddleAddrG_twdl_imX_regN_next;
          twiddleAddrG_twdl_reX_reg <= twiddleAddrG_twdl_reX_reg_next;
          twiddleAddrG_twdl_imX_reg <= twiddleAddrG_twdl_imX_reg_next;
          twiddleAddrG_twdl_re_dly <= twiddleAddrG_twdl_re_dly_next;
          twiddleAddrG_twdl_im_dly <= twiddleAddrG_twdl_im_dly_next;
          twiddleAddrG_procEnbReg <= twiddleAddrG_procEnbReg_next;
        end
      end
    end

  always @(twiddleAddrG_twiddleAddrReg_1, twiddleAddrG_twiddleAddrReg_2,
       twiddleAddrG_twdlDataMapReg, twiddleAddrG_twdlDataMapReg1,
       twiddleAddrG_twdlDataMapReg2, twiddleAddrG_useInterData,
       twiddleAddrG_useInterDataReg1, twiddleAddrG_useInterDataReg2,
       twiddleAddrG_twdlAddrPhase_1, twiddleAddrG_twdl_reI_reg,
       twiddleAddrG_twdl_imI_reg, twiddleAddrG_twdl_reI_reg1,
       twiddleAddrG_twdl_imI_reg1, twiddleAddrG_twdl_reI_reg2,
       twiddleAddrG_twdl_imI_reg2, twiddleAddrG_twdl_reX_regP,
       twiddleAddrG_twdl_imX_regP, twiddleAddrG_twdl_reX_regN,
       twiddleAddrG_twdl_imX_regN, twiddleAddrG_twdl_reX_reg,
       twiddleAddrG_twdl_imX_reg, twiddleAddrG_twdl_re_dly,
       twiddleAddrG_twdl_im_dly, twiddleAddrG_procEnbReg, twdlRdEnb,
       twiddle_re_6, twiddle_im_6, twdlDly, zeroS) begin
    twiddleAddrG_twiddleAddrReg_1_next = twiddleAddrG_twiddleAddrReg_1;
    twiddleAddrG_twiddleAddrReg_2_next = twiddleAddrG_twiddleAddrReg_2;
    twiddleAddrG_twdlDataMapReg_next = twiddleAddrG_twdlDataMapReg;
    twiddleAddrG_useInterData_next = twiddleAddrG_useInterData;
    twiddleAddrG_twdl_reI_reg_next = twiddleAddrG_twdl_reI_reg;
    twiddleAddrG_twdl_imI_reg_next = twiddleAddrG_twdl_imI_reg;
    twiddleAddrG_twdl_re_dly_next = twiddleAddrG_twdl_re_dly;
    twiddleAddrG_twdl_im_dly_next = twiddleAddrG_twdl_im_dly;
    if (twdlRdEnb && twiddleAddrG_twdlAddrPhase_1) begin
      twiddleAddrG_twiddleAddrReg_1_next = twiddleAddrG_twiddleAddrReg_1 + 5'b00001;
    end
    if (twdlRdEnb && ( ! twiddleAddrG_twdlAddrPhase_1)) begin
      twiddleAddrG_twiddleAddrReg_2_next = twiddleAddrG_twiddleAddrReg_2 + 5'b00001;
    end
    if (twiddleAddrG_twdlAddrPhase_1) begin
      twiddleAddrG_twdlAddr_raw = {twiddleAddrG_twiddleAddrReg_1[0], twiddleAddrG_twiddleAddrReg_1[1], twiddleAddrG_twiddleAddrReg_1[2], twiddleAddrG_twiddleAddrReg_1[3], twiddleAddrG_twiddleAddrReg_1[4]};
    end
    else begin
      twiddleAddrG_twdlAddr_raw = {twiddleAddrG_twiddleAddrReg_2[0], twiddleAddrG_twiddleAddrReg_2[1], twiddleAddrG_twiddleAddrReg_2[2], twiddleAddrG_twiddleAddrReg_2[3], twiddleAddrG_twiddleAddrReg_2[4]};
    end
    twiddleAddrG_twdlAddrPhase_1_next = 1'b1;
    twiddleAddrG_c = twiddleAddrG_twdlAddr_raw[4:3];
    case ( twiddleAddrG_c)
      2'b00 :
        begin
          twiddleAddrG_twdlAddrMap = twiddleAddrG_twdlAddr_raw[3:0];
        end
      2'b01 :
        begin
          twiddleAddrG_t_2_0 = twiddleAddrG_twdlAddr_raw;
          twiddleAddrG_t_3 = {1'b0, twiddleAddrG_t_2_0};
          twiddleAddrG_sub_temp_0 = 6'b001000 - twiddleAddrG_t_3;
          twiddleAddrG_cast = twiddleAddrG_sub_temp_0[2:0];
          twiddleAddrG_twdlAddrMap = {1'b0, twiddleAddrG_cast};
        end
      2'b10 :
        begin
          twiddleAddrG_t_0_0 = twiddleAddrG_twdlAddr_raw;
          twiddleAddrG_twdlAddrMap = twiddleAddrG_t_0_0[3:0];
        end
      default :
        begin
          twiddleAddrG_t_1 = {2'b0, twiddleAddrG_twdlAddr_raw};
          twiddleAddrG_sub_temp = 7'b0100000 - twiddleAddrG_t_1;
          twiddleAddrG_twdlAddrMap = twiddleAddrG_sub_temp[3:0];
        end
    endcase
    case ( twiddleAddrG_twdlDataMapReg2)
      3'b000 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
      3'b010 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_imX_regN;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_reX_regN;
        end
      3'b011 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_imX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_reX_regN;
        end
      3'b001 :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regN;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
      default :
        begin
          twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reX_regP;
          twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imX_regP;
        end
    endcase
    twiddleAddrG_twdlDataMapReg2_next = twiddleAddrG_twdlDataMapReg1;
    twiddleAddrG_twdlDataMapReg1_next = twiddleAddrG_twdlDataMapReg;
    case ( twiddleAddrG_c)
      2'b00 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b000;
        end
      2'b01 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b010;
        end
      2'b10 :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b011;
        end
      default :
        begin
          twiddleAddrG_twdlDataMapReg_next = 3'b001;
        end
    endcase
    if (twiddleAddrG_useInterDataReg2) begin
      twiddleAddrG_twdl_reX_reg2 = twiddleAddrG_twdl_reI_reg2;
      twiddleAddrG_twdl_imX_reg2 = twiddleAddrG_twdl_imI_reg2;
    end
    if (twdlDly) begin
      twdl_re = twiddleAddrG_twdl_re_dly;
      twdl_im = twiddleAddrG_twdl_im_dly;
    end
    else begin
      twdl_re = twiddleAddrG_twdl_reX_reg2;
      twdl_im = twiddleAddrG_twdl_imX_reg2;
    end
    if (( ! twdlDly) || twiddleAddrG_procEnbReg) begin
      twiddleAddrG_twdl_re_dly_next = twiddleAddrG_twdl_reX_reg2;
      twiddleAddrG_twdl_im_dly_next = twiddleAddrG_twdl_imX_reg2;
    end
    twiddleAddrG_useInterDataReg2_next = twiddleAddrG_useInterDataReg1;
    twiddleAddrG_useInterDataReg1_next = twiddleAddrG_useInterData;
    twiddleAddrG_twdl_reI_reg2_next = twiddleAddrG_twdl_reI_reg1;
    twiddleAddrG_twdl_reI_reg1_next = twiddleAddrG_twdl_reI_reg;
    twiddleAddrG_twdl_imI_reg2_next = twiddleAddrG_twdl_imI_reg1;
    twiddleAddrG_twdl_imI_reg1_next = twiddleAddrG_twdl_imI_reg;
    case ( twiddleAddrG_twdlAddr_raw)
      5'b01000 :
        begin
          twiddleAddrG_useInterData_next = 1'b1;
          twiddleAddrG_twdl_reI_reg_next = 16'sb0010110101000001;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
      5'b11000 :
        begin
          twiddleAddrG_useInterData_next = 1'b1;
          twiddleAddrG_twdl_reI_reg_next = 16'sb1101001010111111;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
      default :
        begin
          twiddleAddrG_useInterData_next = 1'b0;
          twiddleAddrG_twdl_reI_reg_next = 16'sb0010110101000001;
          twiddleAddrG_twdl_imI_reg_next = 16'sb1101001010111111;
        end
    endcase
    twiddleAddrG_twdl_reX_regP_next = twiddleAddrG_twdl_reX_reg;
    twiddleAddrG_twdl_imX_regP_next = twiddleAddrG_twdl_imX_reg;
    twiddleAddrG_cast_0 = {twiddleAddrG_twdl_reX_reg[15], twiddleAddrG_twdl_reX_reg};
    twiddleAddrG_cast_1 =  - (twiddleAddrG_cast_0);
    twiddleAddrG_twdl_reX_regN_next = twiddleAddrG_cast_1[15:0];
    twiddleAddrG_cast_2 = {twiddleAddrG_twdl_imX_reg[15], twiddleAddrG_twdl_imX_reg};
    twiddleAddrG_cast_3 =  - (twiddleAddrG_cast_2);
    twiddleAddrG_twdl_imX_regN_next = twiddleAddrG_cast_3[15:0];
    twiddleAddrG_twdl_reX_reg_next = twiddle_re_6;
    twiddleAddrG_twdl_imX_reg_next = twiddle_im_6;
    twiddleAddrG_procEnbReg_next = zeroS;
    twiddleAddr_6_1 = twiddleAddrG_twdlAddrMap[2:0];
  end



  // CommutatorL
  always @(posedge clk)
    begin : commutatorL_process
      if (reset == 1'b1) begin
        commutatorL_realIn_vld_dly1 <= 1'b0;
        commutatorL_procEnb_dly1 <= 1'b0;
        commutatorL_twdlRe_dly <= 16'sb0000000000000000;
        commutatorL_twdlIm_dly <= 16'sb0000000000000000;
        commutatorL_yv_in <= 16'sb0000000000000000;
        commutatorL_vy_in <= 16'sb0000000000000000;
        commutatorL_x_re_dly1 <= 16'sb0000000000000000;
        commutatorL_x_im_dly2 <= 16'sb0000000000000000;
        commutatorL_procEnb_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          commutatorL_realIn_vld_dly1 <= commutatorL_realIn_vld_dly1_next;
          commutatorL_yv_in <= commutatorL_yv_in_next;
          commutatorL_vy_in <= commutatorL_vy_in_next;
          commutatorL_twdlRe_dly <= commutatorL_twdlRe_dly_next;
          commutatorL_twdlIm_dly <= commutatorL_twdlIm_dly_next;
          commutatorL_x_re_dly1 <= commutatorL_x_re_dly1_next;
          commutatorL_x_im_dly2 <= commutatorL_x_im_dly2_next;
          commutatorL_procEnb_dly <= commutatorL_procEnb_dly_next;
          commutatorL_procEnb_dly1 <= commutatorL_procEnb_dly1_next;
        end
      end
    end

  always @(commutatorL_realIn_vld_dly1, commutatorL_yv_in, commutatorL_vy_in,
       commutatorL_twdlRe_dly, commutatorL_twdlIm_dly, commutatorL_x_re_dly1,
       commutatorL_x_im_dly2, commutatorL_procEnb_dly, commutatorL_procEnb_dly1,
       procEnb, realIn_vld, useMemData, useDlyData_1, useDlyData_2, dout_re5,
       dout_im5, din_re_dly1, din_im_dly1, din_re_dly2, din_im_dly2,
       din_re_dly3, din_im_dly3, x_re, x_im_dly1, y_re, y_im, y_re_dly1,
       y_im_dly1, twdl_re, twdl_im) begin
    commutatorL_yv_in_next = commutatorL_yv_in;
    commutatorL_vy_in_next = commutatorL_vy_in;
    commutatorL_twdlRe_dly_next = commutatorL_twdlRe_dly;
    commutatorL_twdlIm_dly_next = commutatorL_twdlIm_dly;
    commutatorL_x_re_dly1_next = commutatorL_x_re_dly1;
    extended_dvld = commutatorL_procEnb_dly || commutatorL_procEnb_dly1;
    commutatorL_procEnb_dly1_next = commutatorL_procEnb_dly;
    commutatorL_procEnb_dly_next = procEnb;
    if (commutatorL_realIn_vld_dly1) begin
      x_u_in = commutatorL_x_re_dly1;
    end
    else begin
      x_u_in = commutatorL_x_im_dly2;
    end
    if (useMemData) begin
      if (realIn_vld) begin
        commutatorL_yv_in_next = y_re;
        commutatorL_vy_in_next = y_im;
      end
      else begin
        commutatorL_yv_in_next = y_im_dly1;
        commutatorL_vy_in_next = y_re_dly1;
      end
    end
    else if (useDlyData_1) begin
      if (realIn_vld) begin
        commutatorL_yv_in_next = din_re_dly1;
        commutatorL_vy_in_next = din_im_dly1;
      end
      else begin
        commutatorL_yv_in_next = din_im_dly2;
        commutatorL_vy_in_next = din_re_dly2;
      end
    end
    else if (useDlyData_2) begin
      if (realIn_vld) begin
        commutatorL_yv_in_next = din_re_dly2;
        commutatorL_vy_in_next = din_im_dly2;
      end
      else begin
        commutatorL_yv_in_next = din_im_dly3;
        commutatorL_vy_in_next = din_re_dly3;
      end
    end
    else if (realIn_vld) begin
      commutatorL_yv_in_next = dout_re5;
      commutatorL_vy_in_next = dout_im5;
    end
    else begin
      commutatorL_yv_in_next = din_im_dly1;
      commutatorL_vy_in_next = din_re_dly1;
    end
    if (realIn_vld) begin
      commutatorL_twdlRe_dly_next = twdl_re;
      commutatorL_twdlIm_dly_next = twdl_im;
    end
    if (realIn_vld && ( ! commutatorL_realIn_vld_dly1)) begin
      commutatorL_x_re_dly1_next = x_re;
    end
    commutatorL_x_im_dly2_next = x_im_dly1;
    commutatorL_realIn_vld_dly1_next = realIn_vld;
    y_v_in = commutatorL_yv_in;
    v_y_in = commutatorL_vy_in;
    twdl_re_dly = commutatorL_twdlRe_dly;
    twdl_im_dly = commutatorL_twdlIm_dly;
    procEnbReg = commutatorL_procEnb_dly;
  end



  Radix2ButterflyG_block1   u_ButterflyG   (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .stageIn_6(stageIn_6),  // ufix3
                                            .procEnbReg(procEnbReg),
                                            .twdl_re_dly(twdl_re_dly),  // sfix16_En14
                                            .twdl_im_dly(twdl_im_dly),  // sfix16_En14
                                            .x_u_in(x_u_in),  // sfix16
                                            .y_v_in(y_v_in),  // sfix16
                                            .v_y_in(v_y_in),  // sfix16
                                            .extended_dvld(extended_dvld),
                                            .softReset(softReset),
                                            .stageOut_6(stageOut_6),  // ufix3
                                            .x_out(x_out),  // sfix34_En14
                                            .u_out(u_out),  // sfix34_En14
                                            .y_out(y_out),  // sfix34_En14
                                            .v_out(v_out),  // sfix34_En14
                                            .realOut_dvld(realOut_dvld),
                                            .doutVld(doutVld)
                                            );

  // outputMuxL
  always @(posedge clk)
    begin : outputMuxL_process
      if (reset == 1'b1) begin
        outputMuxL_x_out_dly <= 16'sb0000000000000000;
        outputMuxL_y_out_dly <= 16'sb0000000000000000;
        outputMuxL_dout_re_reg <= 16'sb0000000000000000;
        outputMuxL_dout_im_reg <= 16'sb0000000000000000;
        outputMuxL_doutvld_reg <= 1'b0;
        outputMuxL_doutvld <= 1'b0;
        outputMuxL_realOut_vld_dly <= 1'b0;
      end
      else begin
        if (enb) begin
          outputMuxL_x_out_dly <= outputMuxL_x_out_dly_next;
          outputMuxL_y_out_dly <= outputMuxL_y_out_dly_next;
          outputMuxL_doutvld <= outputMuxL_doutvld_next;
          outputMuxL_doutvld_reg <= outputMuxL_doutvld_reg_next;
          outputMuxL_dout_re_reg <= outputMuxL_dout_re_reg_next;
          outputMuxL_dout_im_reg <= outputMuxL_dout_im_reg_next;
          outputMuxL_realOut_vld_dly <= outputMuxL_realOut_vld_dly_next;
        end
      end
    end

  always @(outputMuxL_x_out_dly, outputMuxL_y_out_dly, outputMuxL_doutvld,
       outputMuxL_doutvld_reg, outputMuxL_dout_re_reg, outputMuxL_dout_im_reg,
       outputMuxL_realOut_vld_dly, doutVld, realOut_dvld, x_out, y_out, u_out,
       v_out) begin
    outputMuxL_x_out_dly_next = outputMuxL_x_out_dly;
    outputMuxL_y_out_dly_next = outputMuxL_y_out_dly;
    outputMuxL_dout_re_reg_next = outputMuxL_dout_re_reg;
    outputMuxL_dout_im_reg_next = outputMuxL_dout_im_reg;
    if (outputMuxL_doutvld_reg) begin
      if ( ! outputMuxL_realOut_vld_dly) begin
        outputMuxL_dout_re_reg_next = outputMuxL_y_out_dly;
        outputMuxL_in5_0 = v_out >>> 8'd1;
        outputMuxL_dout_im_reg_next = outputMuxL_in5_0[29:14];
      end
      else begin
        outputMuxL_dout_re_reg_next = outputMuxL_x_out_dly;
        outputMuxL_in4_0 = u_out >>> 8'd1;
        outputMuxL_dout_im_reg_next = outputMuxL_in4_0[29:14];
      end
    end
    if (doutVld) begin
      outputMuxL_in2_0 = x_out >>> 8'd1;
      outputMuxL_x_out_dly_next = outputMuxL_in2_0[29:14];
      outputMuxL_in3_0 = y_out >>> 8'd1;
      outputMuxL_y_out_dly_next = outputMuxL_in3_0[29:14];
    end
    outputMuxL_realOut_vld_dly_next = realOut_dvld;
    outputMuxL_doutvld_next = outputMuxL_doutvld_reg;
    outputMuxL_doutvld_reg_next = doutVld;
    dout_re6_1 = outputMuxL_dout_re_reg;
    dout_im6_1 = outputMuxL_dout_im_reg;
    dout_vld6_1 = outputMuxL_doutvld;
  end



  assign twiddleAddr_6 = twiddleAddr_6_1;

  assign dout_re6 = dout_re6_1;

  assign dout_im6 = dout_im6_1;

  assign dout_vld6 = dout_vld6_1;

endmodule  // RADIX2FFT_KernelL

